<?php
/**
 * @file
 * Code for the DoSomething User feature.
 */

include_once 'dosomething_user.features.inc';
include_once 'dosomething_user_profile.inc';
include_once 'dosomething_user_valid_address.inc';
include_once 'dosomething_user.theme.inc';

/**
 * Implements hook_init().
 */
function dosomething_user_init() {
  // If viewing a node/[nid] page:
  if (arg(0) == 'node' && is_numeric(arg(1)) && (!arg(2) || arg(2) == 'view')) {
    // Load that node.
    $node = menu_get_object();
    // If node type is staff only:
    if (in_array($node->type, dosomething_user_get_staff_only_types())) {
      // If logged in user is not staff:
      if (!dosomething_user_is_staff()) {
        // No node for you.  Redirect to front page for now.
        if (!function_exists('drush_main')) {
          drupal_goto();
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function dosomething_user_menu() {
  $items = array();
  $items['user/validate/address'] = array(
    'title' => 'address',
    'access callback' => TRUE,
    'page arguments' => array(3),
    'page callback' => 'dosomething_user_validate_user_address',
    'file' => 'dosomething_user_valid_address.inc'
  );

  $items['admin/config/dosomething/ups-api-settings'] = array(
    'title' => t('UPS API Configuration'),
    'description' => t('UPS integration that provices address validation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_user_ups_api_settings'),
    'file' => 'dosomething_user_valid_address.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer UPS address validation'),
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function dosomething_user_permission() {
  return array(
    'administer UPS address validation' =>  array(
      'title' => t('Administer UPS address validation'),
      'description' => t('Manage UPS api key, username & password'),
    )
  );
}


/**
 * Returns an array of node types that only staff can view.
 */
function dosomething_user_get_staff_only_types() {
  return array('fact', 'image', 'campaign_run');
}

 /**
  * Confirms that a specific mobile phone number is valid.
  *
  * A valid phone number is a number with either 10 or 11 digits
  * (as long as the first digit is a "1").
  * Valid phone numbers do not have 3 consecutive 5's in any part, nor do they
  * use punctuation where there should be numbers.  Phone numbers also
  * do not have 9 consecutive, equal digits (e.g. 999-999-9999).
  *
  * @code
  *  dosomething_user_valid_mobile('123-456-7890');
  *  # => true
  *  dosomething_user_valid_mobile('123.456 7890');
  *  # => true
  *  dosomething_user_valid_mobile('1 (123) 456-7890');
  *  # => true
  *  dosomething_user_valid_mobile('123-555-9942');
  *  # => false
  *  dosomething_user_valid_mobile('1 902 #@@ 1234');
  *  # => false
  *  dosomething_user_valid_mobile('999 999 9999');
  *  # => false
  * @endcode
  *
  * @param string $number
  *   The mobile phone number that should be validated.
  *
  * @return bool
  *   True if valid, else false.
  */
function dosomething_user_valid_mobile($number) {
  preg_match('#^(?:\+?1([\-\s\.]{1})?)?\(?([0-9]{3})\)?(?:[\-\s\.]{1})?([0-9]{3})(?:[\-\s\.]{1})?([0-9]{4})#', $number, $valid);
  preg_match('#([0-9]{1})\1{9,}#', preg_replace('#[^0-9]+#', '', $number), $repeat);
  return !empty($valid) && empty($repeat) && strpos($number, '555') === FALSE;
}

/**
 * Determines if a user is on the ds staff.
 *
 * @param object $user
 *   A user object.
 *
 * @return bool
 *   Returns true if user has a staff role applied, else false.
 */
function dosomething_user_is_staff($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  // Create an array of staff role ids.
  $staff_roles = array(
    user_role_load_by_name('administrator')->rid,
    user_role_load_by_name('editor')->rid,
    user_role_load_by_name('communications team')->rid,
    user_role_load_by_name('member support')->rid,
  );

  // Does this user have a staff rid?
  if (array_intersect(array_keys($user->roles), $staff_roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_user_form_alter(&$form, $form_state, $form_id) {
  global $user;
  $account = $user;
  switch ($form_id) {
    case 'user_login_block':
    case 'user_login':
      // Add additional submission/validation/actions.
      $form['#action'] = '/user/login';
      array_unshift($form['#validate'], 'dosomething_user_login_validate');
      $form['#submit'][] = 'dosomething_user_login_submit';
      // Helper text & additional data.
      _dosomething_user_add_signup_data($form);

    break;

    case 'user_profile_form':
    case 'user_register_form':
      // Gather helper text.
      _dosomething_user_register_helper_text($form);
      // Add campaign data, if needed.
      _dosomething_user_add_signup_data($form);

      // Force action to post to the user registration, but not on the add people screen.
      if ($form_id == 'user_register_form' && $_SERVER['REQUEST_URI'] != '/admin/people/create') {
        $form['#action'] = '/user/register';
        $form['#submit'][] = 'dosomething_user_new_user';
      }


      // Add extra validation on the edit page, for addresses.
      $current_page = $_SERVER['REQUEST_URI'];
      if (preg_match('/user\/([0-9]+)\/edit/', $current_page)) {
        $form['#validate'][] = 'dosomething_user_validate_address_field';
      }

      // This field should always be hidden from users.
      unset($form['field_under_thirteen']);

      // Only staff can view/edit Partners term reference.
      if (!dosomething_user_is_staff()) {
        unset($form['field_partner']);
      }

      $form['#after_build'][] = 'dosomething_user_remove_extra_values_from_address_field';
      $form['#after_build'][] = 'dosomething_user_add_validation_attributes_to_address_fields'; 
      // Custom validation & submission handlers.
      $form['#validate'][] = 'dosomething_user_register_validate';
      $form['#submit'][] = 'dosomething_user_login_submit';

    break;

    case 'user_pass':
      $form['#submit'][] = 'dosomething_user_user_pass_submit';
    break;

  }
}
/**
 * After build to alter the address field options.
 *
 * Removes all extra state options from the addressfield dropdown.
 */
function dosomething_user_remove_extra_values_from_address_field($form, &$form_state) {
  // Get the right form address field.
  if ($form['#form_id'] == 'user_profile_form') {
    $options = &$form['field_address'][LANGUAGE_NONE][0];
  }
  elseif ($form['#form_id'] == 'dosomething_signup_user_signup_data_form') {
    $options = &$form['user_address'];
  }
  // Pass by ref to ensure changes are made to field.
  $options = &$options['address']['locality_block']['administrative_area']['#options'];

  $states_to_remove = array(
    'AA', 'AE', 'AP', 'AS', 'FM', 'GU', 'MH', 'MP', 'PW', 'VI',
  );

  // Unset the extra state options.
  foreach($states_to_remove as $state) {
    unset($options[$state]);
  }

  return $form;

}

/**
 * After build to add validation to address fields.
 */
function dosomething_user_add_validation_attributes_to_address_fields($form, &$form_state) {
  // Get the right form address field.
  if ($form['#form_id'] == 'user_profile_form') {
    $address = &$form['field_address'][LANGUAGE_NONE][0];
  } elseif ($form['#form_id'] == 'dosomething_signup_user_signup_data_form') {
    $address = &$form['user_address'];
  }

  // Add `data-validate` attributes:
  $address['address']['street_block']['thoroughfare']['#attributes']['data-validate'] = 'address1';
  $address['address']['street_block']['premise']['#attributes']['data-validate'] = 'address2';
  $address['address']['locality_block']['locality']['#attributes']['data-validate'] = 'city';
  $address['address']['locality_block']['administrative_area']['#attributes']['data-validate'] = 'state';
  $address['address']['locality_block']['postal_code']['#attributes']['data-validate'] = 'zipcode';

  return $form;
}

/**
 * Validate address field as it is on the user object
 *
 * @param array $form
 *  A drupal form.
 * @param array $form_state
 *  A drupal form_state array.
 *
 */
function dosomething_user_validate_address_field($form, &$form_state) {
  $first_name = $form_state['input']['field_first_name'][LANGUAGE_NONE][0]['value'];
  $last_name = $form_state['input']['field_last_name'][LANGUAGE_NONE][0]['value'];
  $address = $form_state['input']['field_address'][LANGUAGE_NONE][0];

  // Only validate if we have values in the array.
  if ($address['thoroughfare'] !== '' && $address['locality'] !== '' && $address['administrative_area'] !== '' && $address['postal_code'] !== '') {
    $formatted_address = dosomething_user_validate_any_address($first_name, $last_name, $address);

    // Did we not get any results?
    if (in_array('sorry', $formatted_address)) {
      form_set_error('dosomething_user_validate_address', t('Hmmm, we couldn’t find that address. Please try again.'));
    }
    // Did it come back from the api as ambiguous? -- Check with the user.
    elseif (in_array('ambiguous', $formatted_address)) {
      dosomething_user_set_address_values($form, $form_state, $formatted_address);
      form_set_error('dosomething_user_ambiguous_address', t('Hmmm, we couldn’t find that address. Did you mean: '));
    }
    // We have a full address, save it!
    else {
      dosomething_user_set_address_values($form, $form_state, $formatted_address);
    }
  }
}

/**
 * Set the formatted address values in a form.
 *
 * @param array $form
 *  A drupal form.
 * @param array $form_state
 *  A drupal form_state.
 * @param array $address
 *  A validated drupal addressfield array.
 */
function dosomething_user_set_address_values($form, &$form_state, $address) {
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['street_block']['thoroughfare'],
      array('value' => $address['thoroughfare']), $form_state);
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['street_block']['premise'],
      array('value' => $address['premise']), $form_state);
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['locality_block']['locality'],
      array('value' => $address['locality']), $form_state);
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['locality_block']['administrative_area'],
      array('value' => $address['administrative_area']), $form_state);
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['locality_block']['postal_code'],
      array('value' => $address['postal_code']), $form_state);
}

/**
 * Custom password reset submission handler.
 *
 * Sends request to mbp (Message Broker Producer) to send transactional
 * email message with reset link.
 */
function dosomething_user_user_pass_submit($form, &$form_state) {
  if (isset($form_state['input']['name'])) {
    $account = user_load_by_mail($form_state['input']['name']);
    if (isset($account->mail)) {
      // Send external message request
      $params = array(
        'email' => $account->mail,
        'uid' => $account->uid,
        'first_name' => dosomething_user_get_field('field_first_name', $account),
        'user_name' => $account->name,
        'reset_link' => user_pass_reset_url($account),
      );
      if (module_exists('dosomething_mbp')) {
        dosomething_mbp_request('user_password', $params);
      }
    }
  }
}

/**
 * Custom new user login submission handler.
 *
 * Does actions after a new user has registered via the web.
 * Sign user up for emails/texts.
 */
function dosomething_user_new_user($form, &$form_state) {
  // Should we sign this kid up for messages?
  if (!dosomething_user_is_under_thirteen()) {
    global $user;
    $account = $user;
    // Send external message request
    $params = array(
      'email' => $account->mail,
      'uid' => $account->uid,
      'first_name' => dosomething_user_get_field('field_first_name', $account),
      'birthdate' => dosomething_user_get_field('field_birthdate', $account),
    );
    if (module_exists('dosomething_mbp')) {
      dosomething_mbp_request('user_register', $params);
    }
    // Sign user up for mobile commons
    if (module_exists('dosomething_signup')) {
      $opt_in = variable_get('dosomething_mobilecommons_general');
      dosomething_signup_mobilecommons_opt_in($account, $opt_in);
    }
  }
}

/**
 * Checks that user is over 13.
 *
 * This is needed to make sure a new user is old enough
 * to get any external messages from us.
 *
 * @return bool
 *  Returns true if user is under 13, else false.
 */
function dosomething_user_is_under_thirteen($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  $birthday = dosomething_user_get_field('field_birthdate', $user);
  // Get the date 13 years ago today.
  $date_cutoff = strtotime('-13 years');
  if ($date_cutoff < $birthday) {
    // Set under 13 bool to true.
    //@TODO: Cron that checks users in these values and updates users.
    $wrapper = entity_metadata_wrapper('user', $user);
    $wrapper->field_under_thirteen->set(1);
    $wrapper->save();
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Checks if user is an "old person", meaning age 26 or older.
 *
 * @return bool
 *  Returns TRUE if user is an old person, else FALSE.
 */
function dosomething_user_is_old_person($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  $birthday = dosomething_user_get_field('field_birthdate', $user);
  // Get the date 26 years ago today.
  $date_cutoff = strtotime('-26 years');
  return $date_cutoff > $birthday;
}

/**
 * Custom login submission handler.
 *
 * If there's a hidden nid, sign the user up for a campaign.
 *
 * This function will only work upon registration if account variables
 * are set to the following:
 * -- A visitor can register for the site without admin approval
 * -- Email verification is not required when user creates account.
 *
 * Otherwise, the global $user upon account creation is set with uid 0
 * and signup will fail.
 *
 * @see dosomething_user_strongarm()
 */
function dosomething_user_login_submit($form, &$form_state) {
  // If nid is not present, nothing to sign up for.  Exit.
  if (isset($form['nid']['#value'])) {
    $nid = $form['nid']['#value'];
    // Signup global user for node $nid.
    if (module_exists('dosomething_signup')) {
      // First check if the campaign is closed.
      $campaign = node_load($nid);
      if (dosomething_campaign_is_closed($campaign)) {
        dosomething_signup_user_presignup($nid);
      }
      else {
        dosomething_signup_user_signup($nid);
      }
    }
  }
  // After all logins redirect to page user was just on.
  $form_state['redirect'] = drupal_get_path_alias($_SERVER['HTTP_REFERER']);
}

/**
 * Implements hook_user_insert().
 */
function dosomething_user_user_insert(&$edit, &$account, $category = NULL) {
  // Only automatically generate 'name' if not on staff.
  if (!dosomething_user_is_staff()) {
    // Replace fake user name with uid.
    db_update('users')
      ->fields(array('name' => $account->uid))
      ->condition('uid', $account->uid)
      ->execute();

    $edit['name'] = $account->uid;
    $account->name = $account->uid;
  }
}

/**
 * Add hidden campaign nid to signup/registration form.
 *
 * @param array $form
 *  A drupal form.
 */
function _dosomething_user_add_signup_data(&$form) {
  if (!module_exists('dosomething_signup')) { return; }

  // If we're viewing a node to signup for:
  if ($nid = dosomething_signup_get_login_signup_nid()) {
    $form['nid'] = array(
      '#type' => 'hidden',
      '#value' => $nid,
      '#access' => FALSE,
    );
    $form['#action'] = '/' . drupal_get_path_alias('node/' . $nid);
  }
}

/**
 * Registration helper text.
 *
 * @param array $form
 *  A drupal form.
 */
function _dosomething_user_register_helper_text(&$form) {
  // Hide the username field & randomly generate the value for non-staffers.
  if (!dosomething_user_is_staff()) {
    $form['account']['name']['#type'] = 'hidden';
    $form['account']['name']['#value'] = user_password();
  }
}

/**
 * Custom login validation.
 *
 * Allows for users to login via email or mobile number.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_login_validate($form, &$form_state) {
  // Note: Taken from logintoboggan module.
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($account = dosomething_user_get_user_by_email($form_state['values']['name'])) {
      form_set_value($form['name'], $account->name, $form_state);
    }
    elseif ($number = $form_state['values']['name']) {
      if ($account = dosomething_user_get_user_by_mobile($number)) {
        form_set_value($form['name'], $account->name, $form_state);
      }
    }
  }
}

/**
 * Additional user registration validation hook.
 *
 * Clean user data on registration.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_register_validate($form, &$form_state) {
  $mobile = $form_state['values']['field_mobile'][LANGUAGE_NONE][0]['value'];
  if (!empty($mobile)) {
    // Clean the user input text.
    $mobile_clean = dosomething_user_clean_mobile_number($mobile);

    // Get the user's current number & see if they are updating.
    // We have to send in the uid of the form we are on, not the global user
    // When admins are updating accounts this will fail!
    $account = $form_state['build_info']['args'][0];
    $current_number = dosomething_user_get_field('field_mobile', $account);
    if ($mobile_clean != $current_number && ($user = dosomething_user_get_user_by_mobile($mobile_clean))) {
      // This dude already has an account.
      form_set_error('dosomething_user_already_registered', t('The phone number '. $mobile . ' is already registered. Have you ' . l('forgotten your password?', 'user/password')));
    }
    else {
      // Store only the numbers.
      form_set_value($form['field_mobile'], array(LANGUAGE_NONE => array(0 => array('value' => $mobile_clean))), $form_state);
    }
  }
}

/**
 * Get a user by email address.
 *
 * @param string $email
 *   The user's email.
 *
 * @return object/bool
 *   If true return the user object, else false.
 */
function dosomething_user_get_user_by_email($email) {
  $user = user_load_by_mail($email);
  return $user ? $user : FALSE;
}

/**
 * Search for users users by their mobile phone number.
 *
 * @param string $number
 *   The mobile phone number for which you are searching.
 *
 * @return object/bool
 *   The user account object, or false if no user was found.
 */
function dosomething_user_get_user_by_mobile($number) {
  if ($clean_number = dosomething_user_clean_mobile_number($number)) {

    $query = db_select('field_data_field_mobile', 'm')
              ->fields('m', array('entity_id'))
              ->condition('field_mobile_value', $clean_number)
              ->execute();
    $uid = $query->fetchField(0);
    if (is_numeric($uid)) {
      return user_load($uid);
    }
    return FALSE;
  }

  return FALSE;
}


/**
 * Clean input phone number of all non-numeric characters.
 *
 * @param string $number
 *   The user-input mobile number.
 *
 * @return string/bool
 *   Numeric-only string of the phone number, or FALSE if not a 10-digit number.
 */
function dosomething_user_clean_mobile_number($number) {
  if (dosomething_user_valid_mobile($number)) {
    $trimmed_number = ltrim(preg_replace('#[^0-9]#', '', $number));

    // Make sure the number is 10 digits long.
    if (strlen($trimmed_number) == 10) {
      return $trimmed_number;
    }
    // Else if it contains a leading 1.
    // (iPhones return the 1 when you copy/paste a number from your contacts).
    else if (strlen($trimmed_number) == 11 && $trimmed_number[0] == 1) {
      // Remove the leading 1.
      return substr($trimmed_number, 1);
    }
    return FALSE;
  }
  return FALSE;
}

/**
 * Create a user account when provided with only a mobile phone number.
 *
 * @param string $number
 *   User's phone number.
 */
function dosomething_user_create_user_by_mobile($number) {
  if ($clean_number = dosomething_user_clean_mobile_number($number)) {
    $user_data = array(
      'name' => user_password(), // Generating unique dummy name. dosomething_user_user_insert() will convert this to the uid.
      'mail' => $clean_number . '@mobile', // Provide a dummy email address.
      'pass' => user_password(),
      'status' => 1,
      'field_mobile' => array(LANGUAGE_NONE => array(0 => array('value' => $clean_number))),
    );

    $user = user_save('', $user_data);

    return $user;
  }

  return FALSE;
}

/**
 * Returns value for given field on given user.
 *
 * @param string $field_name
 *   The machine name of the field that stores value to return.
 * @param object $account
 *   The account to return value for. If NULL, uses global $user.
 * @param string $format
 *   Optional- format to return.
 *    - Dates, http://www.php.net/manual/en/function.date.php.
 *    - Strings uclower, strtolower, strtoupper.
 *
 * @return mixed
 *   Returns NULL if not set, otherwise whatever type of data the field stores.
 */
function dosomething_user_get_field($field_name, $account = NULL, $format = NULL) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }

  $wrapper = entity_metadata_wrapper('user', $account);
  $field_value =  $wrapper->{$field_name}->value();

  // Check if there is a specifc function handler for that field, use that first.
  $handler = 'dosomething_user_get_' . $field_name;
  if (function_exists($handler)) {
    $field_value = ($format == NULL) ? $handler($field_value) : $handler($field_value, $format);
  }
  return $field_value;

}

/**
 * Returns a user's first name.
 *
 * @param object $account
 *   The account to return value for.
 * @param string $format
 *   Optional- format to return.
 *    strtolower, strtoupper, ucwords
 *
 * @return mixed
 *   Returns NULL if not set, otherwise string.
 */
function dosomething_user_get_field_first_name($field_value, $format = 'ucwords') {
  return dosomething_user_format_string($field_value, $format);
}

/**
 * Returns a user's first name.
 *
 * @param object $account
 *   The account to return value for.
 * @param string $format
 *   Optional- format to return.
 *    strtolower, strtoupper, ucwords
 *
 * @return mixed
 *   Returns NULL if not set, otherwise string.
 */
function dosomething_user_get_field_last_name($field_value, $format = 'ucwords') {
  return dosomething_user_format_string($field_value, $format);
}

/**
 * Helper function to format strings.
 *
 * @param string $string
 *  The string to format
 * @param string $format
 *  The format that should be returned.
 *    strtolower, strtoupper, ucwords
 */
function dosomething_user_format_string($string, $format) {
    switch ($format) {
      case 'ucwords':
        return ucwords(strtolower($string));
      case 'strtoupper':
        return strtoupper($string);
      case 'strtolower':
        return strtolower($string);
    }
}


/**
 * Returns given user's birthdate.
 *
 * @param string $field_value
 *   The value of the field from `dosomething_user_get_field` to format.
 * @param string $format
 *   Optional- format to return. http://www.php.net/manual/en/function.date.php.
 *   If NULL, the raw timestamp is returned.
 *
 * @return string
 *   Returns the date in specified $format.
 */
function dosomething_user_get_field_birthdate($field_value, $format = NULL) {
  // If no format specified:
  if ($format == NULL) {
    // Return raw timestamp.
    return $field_value;
  }
  // Return date formatted per $format string.
  return format_date($field_value, 'custom', $format);
}

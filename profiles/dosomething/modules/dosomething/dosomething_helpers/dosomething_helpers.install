<?php
/**
 * @file
 * Installation and schema hooks for dosomething_helpers.module.
 */

/**
 * Implements hook_schema().
 */
function dosomething_helpers_schema() {
  $schema = array();
  $schema['dosomething_helpers_variable'] = array(
    'description' => 'Table of entity configuration variables.',
    'fields' => array(
      'entity_type' => array(
        'description' => 'The entity type this data is attached to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'description' => 'The entity bundle this data is attached to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_id' => array(
        'description' => 'The entity id this data is attached to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'The name of the variable.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'value' => array(
        'description' => 'The value of the variable.',
        'type' => 'blob',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('entity_type', 'entity_id', 'name'),
  );
  return $schema;
}

/**
 * Adds the dosomething_helpers_variable table.
 */
function dosomething_helpers_update_7001() {
  $tbl_name = 'dosomething_helpers_variable';
  // Load schema to get table definition.
  $schema = dosomething_helpers_schema();
  // If table not present:
  if (!db_table_exists($tbl_name)) {
    // Create it.
    db_create_table($tbl_name, $schema[$tbl_name]);
  }
}

/**
 * Migrates alt_bf_fid, alt_color variables to the dosomething_helpers_variable table.
 */
function dosomething_helpers_update_7002() {
  $variables = array('alt_bg_fid', 'alt_color');
  foreach ($variables as $variable) {
    // Grab all variable records:
    $result = db_select('variable', 'v')
      ->fields('v')
      ->condition('name', '%' . db_like($variable), 'LIKE')
      ->execute()
      ->fetchAll();
    // For each variable found:
    foreach ($result as $record) {
      $name = $record->name;
      // Get the numeric nid from the variable name.
      $nid = filter_var($name, FILTER_SANITIZE_NUMBER_INT);
      // Store its value.
      $value = variable_get($name);
      // Save it to the dosomething_helpers_variable table for the node.
      $node = node_load($nid);
      dosomething_helpers_set_variable($node, $variable, $value);
      // Delete the old variable.
      variable_del($name);
    }
  }
}

/**
 * Migrates campaign opt-in variables to the dosomething_helpers_variable table.
 */
function dosomething_helpers_update_7003() {
  // Suffix of variables to migrate from the variable table.
  $variables = array(
    'mailchimp_group_name',
    'mailchimp_grouping_id',
    'mobilecommons_id',
  );
  foreach ($variables as $variable) {
    // Grab all variable records that match.
    $result = db_select('variable', 'v')
      ->fields('v')
      ->condition('name', '%' . db_like($variable), 'LIKE')
      ->execute()
      ->fetchAll();
    // For each variable found:
    foreach ($result as $record) {
      $name = $record->name;
      // Get the numeric nid from the variable name.
      $nid = filter_var($name, FILTER_SANITIZE_NUMBER_INT);
      // Store its value.
      $value = variable_get($name);
      $node = node_load($nid);
      if ($variable == 'mobilecommons_id') {
        // Rename to keep consistent with SMS Game variable.
        $variable = 'mobilecommons_opt_in_path';
      }
      // Save it to the dosomething_helpers_variable table.
      dosomething_helpers_set_variable($node, $variable, $value);
      // Delete the old variable.
      variable_del($name);
    }
  }
  // Last, cleanup unused 'mailchimp_id' variables that were never deleted.
  // @see https://github.com/DoSomething/dosomething/issues/1476
  // Grab all mailchimp_id variables.
  $result = db_select('variable', 'v')
    ->fields('v')
    ->condition('name', '%' . db_like('mailchimp_id'), 'LIKE')
    ->execute()
    ->fetchAll();
  // For each variable found:
  foreach ($result as $record) {
    $name = $record->name;
    variable_del($name);
  }
}

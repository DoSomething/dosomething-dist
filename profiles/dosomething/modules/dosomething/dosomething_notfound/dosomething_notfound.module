<?php
/**
 * @file
 * A  module that handles 404's
 */

include_once 'dosomething_notfound.features.inc';

/**
 * Implements hook_menu().
 */
function dosomething_notfound_menu() {
  $items = array();
  // 404 page.
  $items['notfound'] = array(
    'title' => '404',
    'page callback' => 'dosomething_notfound_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    );
  // 404 page settings.
  $items['admin/config/dosomething/dosomething_notfound'] = array(
    'title' => 'DoSomething Notfound',
    'description' => 'Admin form to set 404 page variables.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_notfound_admin_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_notfound.admin.inc',
    );

  return $items;
}

/*
 * Create the page from the node.
 */
function dosomething_notfound_page() {

  $result = db_select('node', 'n')
  ->condition('type', 'notfound')
  ->condition('status', 1)
  ->fields('n', array('nid'))
  ->range(0, 1)
  ->orderRandom()
  ->execute()
  ->fetchCol(0);

  if ($result) {
    $nid = $result[0];
    $node = node_load($nid);
  } // Else isn't needed as a default node is always created when the module installs.

  // Return & Load node.
  return node_view($node, 'full');
}

/**
 * Implements hook_preprocess_node();
 */
function dosomething_notfound_preprocess_node(&$vars)  {
  if ($vars['type'] != 'notfound') { return; }

  // Adds $subtitle variable.
  $vars['subtitle'] = $vars['field_subtitle'][0]['safe_value'];

  // Add hero image
  dosomething_helpers_preprocess_hero_images($vars);
  dosomething_helpers_add_inline_css($vars);

  // Add hero video
  if (isset($vars['hero_image']['video'])) {
    $vars['video'] = $vars['hero_image']['video'];
  }

  // False until proven true
  $vars['search'] = FALSE;
  $vars['suggestions'] = FALSE;

  // No need to search or lookup anything else
  if (variable_get('dosomething_notfound_disable_results') == 1) {
    return;
  }

  $raw_url = request_path();
  $copy = NULL;

  if (strpos($raw_url, "grants") === 0) {
    $copy = variable_get('dosomething_notfound_copy_grants');
  }
  elseif (strpos($raw_url, "project") === 0) {
    $copy = variable_get('dosomething_notfound_copy_projects');
  }

  if (isset($copy)) {
    $vars['results_info'] = check_markup($copy, 'markdown');

    $vars['suggestions'] = TRUE;
    // Get recommended campaigns.
    $rec_nids = dosomething_campaign_get_recommended_campaign_nids(NULL, NULL, 3);
    $rec_vars = array();
    foreach ($rec_nids as $nid) {
      $rec_vars[] = dosomething_campaign_get_campaign_block_vars($nid);
    }
    $vars['raw_results'] = $rec_vars;
    return;
  }

  $invalid_chars = array("/", "-", "_"); // request_path() shouldn't return a string with question marks and other chars we don't need
  $formatted_terms = explode(" ", str_replace($invalid_chars, " ", $raw_url));

  if (count($formatted_terms) <= 1) {
    return;
  }

  $query_string = "";
  $total = count($formatted_terms);
  for ($i = 0; $i < $total; $i++) {
    $query_string .= $formatted_terms[$i] . " ";
  }

  $search = apachesolr_search_search_execute($query_string);

  if (count($search) == 0) {
    return;
  }

  $vars['search'] = TRUE;
  $vars['results'] = $search;

  // Theme the set of results as duo gallery.
  $vars['search_results_gallery'] = paraneue_dosomething_get_search_gallery($vars['results']);

  // Make the search form availabe to the page.
  $search_form = drupal_get_form('search_form');
  $vars['search_form'] = drupal_render($search_form);

  // Search header text.
  $vars['search_header'] = t('We did a quick search, here is some similar content that we do have.');
}

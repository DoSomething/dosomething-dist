<?php
/**
 * @file
 * A  module that handles 404's
 */

include_once 'dosomething_notfound.features.inc';

/**
 * Implements hook_menu().
 */
function dosomething_notfound_menu() {
  $items = array();
  //404 page
  $items['notfound'] = array(
    'title' => '404',
    'page callback' => 'dosomething_notfound_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    );
  // 404 page settings
  $items['admin/config/dosomething/dosomething_notfound'] = array(
   'title' => 'DoSomething Notfound',
   'description' => 'Admin form to set 404 page variables.',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('dosomething_notfound_admin_config_form'),
   'access callback' => 'user_access',
   'access arguments' => array('administer modules'),
   'file' => 'dosomething_notfound.admin.inc',
   );

  return $items;
}

/*
 * Create the page from the node. 
 */
function dosomething_notfound_page() {

  $result = db_select('node', 'n')
  ->condition('type', 'notfound')
  ->condition('status', 1)
  ->fields('n', array('nid'))
  ->range(0,1)
  ->orderRandom()
  ->execute()
  ->fetchCol(0);
  
  if ($result) {
   $nid = $result[0];
   $node = node_load($nid);
  } // No else is needed as a default node is always created when the module installs

  // Return & Load node
  return node_view($node, 'full');
}

/**
 * Implements hook_preprocess_node();
 */
function dosomething_notfound_preprocess_node(&$vars)  {
  if ($vars['type'] != 'notfound') { return; }

  // Adds $subtitle variable.
  $vars['subtitle'] = $vars['field_subtitle'][0]['safe_value'];

  // Add hero image
  dosomething_helpers_preprocess_hero_images($vars);
  dosomething_helpers_add_inline_css($vars);

  // Add hero video
  if (isset($vars['hero_image']['video'])) {
    $vars['video'] = $vars['hero_image']['video'];
  }

  $vars['search'] = FALSE;
  $vars['suggestions'] = FALSE;

  // No need to search or lookup anything else
  if (variable_get('dosomething_notfound_disable_results') == 1) {
    return;
  }

  // @TODO: Check if its path specific (Intentionally hardcoded), get campaign suggestions, return & set suggestions var to true if it is 

  $invalid_chars = array("/", "-", "_"); // request_path() shouldn't return a string with question marks and other chars we don't need
  $raw_search = request_path();
  $formatted_terms = explode(" ", str_replace($invalid_chars, " ", $raw_search));
  
  if (count($formatted_terms) <= 1) {
    return;
  }

  $query_string = "";
  $total = count($formatted_terms);
  for ($i = 1; $i < $total; $i++) { // Cannot start at 0, don't want that part of URL
    $query_string .= $formatted_terms[$i] . " ";
  }

  $search = apachesolr_search_search_execute($query_string);

  if (count($search) == 0) {
    return;
  }

  $vars['search'] = TRUE;
  $vars['results'] = $search;

}

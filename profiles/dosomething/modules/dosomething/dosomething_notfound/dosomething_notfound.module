<?php
/**
 * @file
 * A  module that handles 404's
 */

include_once 'dosomething_notfound.features.inc';

/**
 * Implements hook_menu().
 */
function dosomething_notfound_menu() {
  $items = array();
  // 404 page.
  $items['notfound'] = array(
    'title' => '404',
    'page callback' => 'dosomething_notfound_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    );
  // 404 page settings.
  $items['admin/config/dosomething/dosomething_notfound'] = array(
    'title' => 'DoSomething Notfound',
    'description' => 'Admin form to set 404 page variables.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_notfound_admin_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_notfound.admin.inc',
    );

  return $items;
}

/*
 * Create the page from the node.
 */
function dosomething_notfound_page() {

  $result = db_select('node', 'n')
  ->condition('type', 'notfound')
  ->condition('status', 1)
  ->fields('n', array('nid'))
  ->range(0, 1)
  ->orderRandom()
  ->execute()
  ->fetchCol(0);

  if ($result) {
    $nid = $result[0];
    $node = node_load($nid);
  } // Else isn't needed as a default node is always created when the module installs.

  // Return & Load node.
  return node_view($node, 'full');
}

/**
 * Implements hook_preprocess_node();
 */
function dosomething_notfound_preprocess_node(&$vars)  {
  if ($vars['type'] != 'notfound') { return; }

  // Adds $subtitle variable.
  $vars['subtitle'] = $vars['field_subtitle'][0]['safe_value'];

  // Add hero image
  dosomething_helpers_preprocess_hero_images($vars);
  dosomething_helpers_add_inline_css($vars);

  // Add hero video
  if (isset($vars['hero_image']['video'])) {
    $vars['video'] = $vars['hero_image']['video'];
  }

  // Indicates if we should display results below header.
  $vars['disable_results'] = FALSE;

  // No need to search or lookup anything else.
  if (variable_get('dosomething_notfound_disable_results') == 1) {
    $vars['disable_results'] = TRUE;
    return;
  }

  $raw_url = request_path();
  $copy = NULL; // Temp variable.

  if (strpos($raw_url, "grants") === 0) {
    $copy = variable_get('dosomething_notfound_copy_grants');
  }
  elseif (strpos($raw_url, "project") === 0) {
    $copy = variable_get('dosomething_notfound_copy_projects');
  }

  // For path specific results.
  if (isset($copy)) {
    // Create class for theming path specific pages.
    $vars['notfound_page_type'] = "path-specific";
    // Sets the copy above the results.
    $vars['results_copy'] = check_markup($copy, 'markdown');
    // Raw results is themed in preprocessing and stored as $campaign_results.
    $vars['raw_campaign_results'] = dosomething_notfound_get_recommended_campaigns();
    return;
  }

  $invalid_chars = array("/", "-", "_"); // request_path() shouldn't return a string with question marks and other chars we don't need
  $formatted_terms = explode(" ", str_replace($invalid_chars, " ", $raw_url));

  // Get a list of terms that we don't want to search by.
  $filter_words = explode(",", variable_get('dosomething_notfound_search_filter'));
  $query_string = "";
  $total = count($formatted_terms);
  // Create the query string.
  for ($i = 0; $i < $total; $i++) {
    $term = $formatted_terms[$i];
    if (!in_array($term, $filter_words)) {
      $query_string .= $term . " ";
    }
  }

  // For 404 pages with search.
  if (!empty($query_string)) {
    $vars['raw_search_results'] = apachesolr_search_search_execute($query_string);
    if (count($vars['raw_search_results']) != 0) {
      // Pass the query string used in the search to the search form.
      $form_state = array(
        'build_info' => array(
          'args' => array(
            'query_string' => $query_string,
          ),
        ),
      );
      $search_form = drupal_build_form('search_form', $form_state);

      // Make the search form availabe to the page.
      $vars['search_form'] = drupal_render($search_form);
      // Search header text.
      $vars['results_copy'] = t('We did a quick search, here is some similar content that we do have.');
      return;
    }
  }

  // Defaults for 404 pages when no results are found or all the terms used are not allowed.
  $search_form = drupal_get_form('search_form');
  $vars['search_form'] = drupal_render($search_form);
  $vars['results_copy'] = t('We couldn\'t find what you were looking for, but try searching our site for something similar.');
  $vars['suggestions_header'] = t('Or join a campaign');
  // Raw results is themed in preprocessing and stored as $campaign_results.
  $vars['raw_campaign_results'] = dosomething_notfound_get_recommended_campaigns();
}

/**
* Implementation of hook_form_FORM_ID_alter()
*/
function dosomething_notfound_form_search_form_alter(&$form, &$form_state, $form_id) {
  // Get the query string from the form state.
  if (!empty($form_state['build_info']['args']['query_string'])) {
    $query_string = $form_state['build_info']['args']['query_string'];
    $form['basic']['keys']['#default_value'] = $query_string;
  }
}

/**
* Get recommended campaigns
*/
function dosomething_notfound_get_recommended_campaigns() {
  $rec_nids = dosomething_campaign_get_recommended_campaign_nids(NULL, NULL, 3);
  $rec_vars = array();
  foreach ($rec_nids as $nid) {
    $rec_vars[] = dosomething_campaign_get_campaign_block_vars($nid);
  }
  return $rec_vars;
}

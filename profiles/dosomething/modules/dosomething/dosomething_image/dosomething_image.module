<?php
/**
 * @file
 * Code for the dosomething_image feature.
 */

include_once 'dosomething_image.features.inc';

/**
 * Implements hook_node_form_alter().
 */
function dosomething_image_form_image_node_form_alter(&$form, &$form_state, $form_id) {
  // Do magic.
  drupal_add_js(drupal_get_path('module', 'dosomething_image') . '/dosomething_image_upload.js');

}

/**
 * Returns a themed image for any image field
 * @param int $nid
 *  The image node id.
 * @param string $ratio
 *  The image field to pull from the desired image ratio (portrait, landscape, square, thumb).
 * @param string $style
 *  The image style preset/size to return the image.
 * @param string $alt
 *  Optional - image alt text.
 * @param array $attributes
 *  Optional - key/value paired array of attributes to add to the image.
 *
 * @return array
 *  A themed image tag with no set height/width.
 */
function dosomething_image_get_themed_image($nid, $ratio, $style, $alt = '', $attributes = array()) {
  // Attempt to get that image from cache.
  if ($cached_img = cache_get('ds_img_' . $nid . '_' . $ratio . '_' . $style, 'cache_dosomething_image')) {
    return $cached_img->data;
  }
  // Theme the image.
  else {
    // Get the path of the themed image.
    $path = dosomething_image_get_themed_image_url($nid, $ratio, $style);
    // Set drupal attributes.
    $attributes = drupal_attributes($attributes);
    // Construst themed image tag.
    $themed_image =  '<img src="' . check_url($path) . '" alt="' . check_plain($alt) . '"' .  $attributes .'>';
    // Store the themed image.
    cache_set('ds_img_' . $nid . '_' . $ratio . '_' . $style, $themed_image, 'cache_dosomething_image');
    return $themed_image;
  }
}

/**
 * Returns an image path.
 * @param int $nid
 *  The image node id.
 * @param string $ratio
 *  The image field to pull from the desired image ratio (portrait, landscape, square, thumb).
 * @param string $style
 *  The image style preset/size to return the image.
 *
 * @return string
 *  An image url.
 */
function dosomething_image_get_image_url($nid, $ratio) {
   $node = node_load($nid);
    switch ($ratio) {
      case 'portrait':
        $path =  $node->field_image_portrait[LANGUAGE_NONE][0]['uri'];
        break;
      case 'landscape':
        $path = $node->field_image_landscape[LANGUAGE_NONE][0]['uri'];
        break;
      case 'square':
        $path =  $node->field_image_square[LANGUAGE_NONE][0]['uri'];
        break;
      case 'thumb':
        $path = $node->field_image_thumbnail[LANGUAGE_NONE][0]['uri'];
        break;
    }
    return $path;
}

/**
 * Returns a sized image path.
 * @param int $nid
 *  The image node id.
 * @param string $ratio
 *  The image field to pull from the desired image ratio (vert, horiz, sq).
 *
 * @return string
 *  A sized image url.
 */
function dosomething_image_get_themed_image_url($nid, $ratio, $style) {
  $base_path = dosomething_image_get_image_url($nid, $ratio);

  // If the image doesn't have the appropriate crop don't return a url.
  if (isset($base_path)) {
    return image_style_url($style, $base_path);
  }
}

/**
 * Implements hook_node_view().
 */
function dosomething_image_node_view($node, $view_mode, $langcode) {
  // Make sure dosomething_helpers is enabled.
  if (!module_exists('dosomething_helpers')) { return; }

  // If viewing an image node:
  if ($node->type == 'image' && $view_mode == 'full') {
    $entityref_fields = array(
      'field_gallery_image',
      'field_hero_image',
      'field_image_campaign_cover',
      'field_image_psa_replacement',
      'field_image_reportback_gallery',
      'field_image_step_gallery',
      'field_intro_image',
    );
    dosomething_helpers_add_entityref_links($node, $entityref_fields);
  }
}

/**
 * Returns a themed image for a given File $fid.
 *
 * @param int $fid
 *  The File fid.
 * @param string $style
 *  The image style preset/size to return the image.
 * @param string $alt
 *  Optional - image alt text.
 *
 * @return array
 *  A themed image tag with no set height/width.
 */
function dosomething_image_get_themed_image_by_fid($fid, $style, $alt = '') {
  $file = file_load($fid);
  $image = image_load($file->uri);
  $content = array(
    'file' => array(
      '#theme' => 'image_style',
      '#style_name' => $style,
      '#path' => $image->source,
      '#alt' => $alt,
    ),
  );
  return drupal_render($content);
}

/**
 * Implements hook_node_update().
 */
function dosomething_image_node_update($node) {
  if ($node->type == 'image') {
    /* @TODO: Eh, I'm not crazy about this, but it's a quick win for now.
     * We don't need to clear the whole cache, and should clear the cache
     * where this is referenced, but that can come later! */
    dosomething_image_cache_clear_all();
  }
}

/**
 * Clear cache on dosomething_image table.
 */
function dosomething_image_cache_clear_all() {
  cache_clear_all('*', 'cache_dosomething_image', TRUE);
}

/**
 * Implements hook_flush_caches().
 */
function dosomething_flush_caches() {
  return array('cache_dosomething_image');
}

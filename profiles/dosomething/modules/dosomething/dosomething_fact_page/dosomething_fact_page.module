<?php
/**
 * @file
 * Code for the DoSomething Fact Page feature.
 */

include_once 'dosomething_fact_page.features.inc';

/**
 * Implements hook_block_info().
 */
function dosomething_fact_page_block_info() {
  $blocks = array();
  $blocks['fact_page_list'] = array(
    'info' => t('DS Fact Page List'),
    //@todo: Remove and set to DRUPAL_CACHE_GLOBAL when done testing.
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dosomething_fact_page_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'fact_page_list':
      // Gather list of Fact Page links.
      $links = dosomething_fact_page_get_fact_page_list_links();
      $block['content'] = theme('fact_page_list', array(
        'links' => $links,
      ));
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function dosomething_fact_page_theme($existing, $type, $theme, $path) {
  return array(
    'fact_page_list' => array(
      'template' => 'fact-page-list',
      'path' => drupal_get_path('module', 'dosomething_fact_page') . '/theme',
      'variables' => array(
        'links' => NULL, 
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_node().
 */
function dosomething_fact_page_preprocess_node(&$vars) {
  if ($vars['type'] == 'fact_page') {
    $content = $vars['content'];
    $template_vars = array(
      'text' => array(
        'subtitle',
        'intro_title',
        'intro',
        'call_to_action',
      ),
      'image' => array(
        'intro_image',
        'hero_image',
      ),
      'link' => array(
        'cta_link'
      ),
    );

    foreach ($template_vars as $key => $labels) {
      foreach ($labels as $label) {
        $field = "field_{$label}";
          if (isset($content[$field])) {
          switch ($key) {
            case 'text':
                $vars[$label] = $content[$field][0]['#markup'];
              break;
            case 'image':
              $vars[$label] = dosomething_image_get_themed_image($vars[$field][0]['entity']->nid, 'landscape', '550x300', $label);
            break;
            case 'link':
              $vars[$label] = l($content[$field][0]['#element']['title'], $content[$field][0]['#element']['url'], array('attributes' => array('class' => 'btn')));
            break;
            default:
              break;
          }
        }
      }
    }

    // @todo: Remove this conditional once fact_collection has been imported.
    // If the fact collections have been imported:
    if (variable_get('dosomething_fact_page_fact_collection_imported') == TRUE) {
      // Get values from field_fact_collection.
      $values = dosomething_fact_page_get_fact_collection_vars($vars['node']);
    }
    // Else if not imported yet:
    else {
      $node = entity_metadata_wrapper('node', $vars['node']);
      // Get values from the field_facts field.
      $values = dosomething_fact_get_fact_field_vars($node->field_facts);
    }

    $vars['facts'] = $values['facts'];
    $vars['sources'] = $values['sources'];
  }
}

/**
 * Returns array of facts/sources from a given loaded Fact Page node.
 *
 * @param obj $node
 *   A loaded Fact Page node.
 *
 * @return array
 *   Multi dimensional array, keyed by facts and sources.
 */
function dosomething_fact_page_get_fact_collection_vars($node) {
  if (!isset($node->field_fact_collection[LANGUAGE_NONE])) { return NULL; }

  // Initialize output arrays.
  $facts = $sources = array();
  // Loop through the field_fact_collection Field Collection Item values:
  foreach ($node->field_fact_collection[LANGUAGE_NONE] as $delta => $fc_item_vars) {
    // Load the Field Collection Item.
    $fc_item_id = $fc_item_vars['value'];
    $fc_item = field_collection_item_load($fc_item_id);
    // Get the fact's vars.
    $fact_nid = $fc_item->field_fact[LANGUAGE_NONE][0]['target_id'];
    $fact_wrapper = entity_metadata_wrapper('node', $fact_nid);
    $facts[$delta] = dosomething_fact_get_fact_vars($fact_wrapper, $delta);
    // Append the fact's sources to the $sources array.
    $sources = array_merge($sources, $facts[$delta]['sources']);
    // If copy has been set:
    if ($copy = dosomething_fact_page_get_fact_collection_copy($fc_item)) {
      // Append to the end of the fact.
      $facts[$delta]['fact'] .= ' ' . $copy;
    }
  }
  return array(
    'facts' => $facts,
    'sources' => $sources,
  );
}

/**
 * Returns markup to displayed for a given Fact in a Fact Collection.
 *
 * @param obj $fc_item
 *   A loaded field_fact_collection Field Collection Item.
 *
 * @return string
 */
function dosomething_fact_page_get_fact_collection_copy($fc_item) {
  // If copy has not been set, nothing to do.
  if (!isset($fc_item->field_compound_text_copy[LANGUAGE_NONE][0])) { 
    return NULL;
  }
  // Store the copy safe_value.
  $copy = $fc_item->field_compound_text_copy[LANGUAGE_NONE][0]['safe_value'];
  // If no campaign has been set:
  if (!isset($fc_item->field_campaigns[LANGUAGE_NONE][0])) {
    // Return copy as is.
    return $copy;
  }

  // Set the link to the Campaign node.
  $node = $fc_item->field_campaigns[LANGUAGE_NONE][0]['entity'];
  $link = l($node->title, 'node/' . $node->nid);
  // Replace the [link] token with the link markup.
  return str_replace("[link]", $link, $copy);
}

/**
 * Returns links of published fact_page nodes.
 *
 * @param int $tid
 *   Primary cause term tid to filter nodes by.
 *
 * @return array
 *  Array of links.
 */
function dosomething_fact_page_get_fact_page_list_by_tid($tid) {
  $query = db_select('node', 'n');
  $query->innerJoin('field_data_field_primary_cause', 'c', 'c.entity_id = n.nid');
  $query->condition('type', 'fact_page')
    ->condition('field_primary_cause_tid', $tid)
    ->condition('status', 1)
    ->orderBy('title');
  $query->fields('n', array('nid', 'title'));
  $results = $query->execute();

  foreach($results as $key => $result) {
    $output[$key] = l($result->title, 'node/' . $result->nid);
  }
  if ($output) {
    return $output;
  }
  // If no results, return null.
  return NULL;
}

/**
 * Returns multi-dimensional array of published fact_page nodes.
 *
 * @return array
 *   Array of arrays of links, keyed by Primary Cause name. 
 */
function dosomething_fact_page_get_fact_page_list_links() {
  $vocab = taxonomy_vocabulary_machine_name_load('cause');
  $tree = taxonomy_get_tree($vocab->vid);
  foreach ($tree as $term) {
    if ($links = dosomething_fact_page_get_fact_page_list_by_tid($term->tid)) {
      $results[$term->name] = $links;
    }
  }
  if ($results) {
    return $results;
  }
  return NULL;
}

/**
 * Imports values from field_facts into field_fact_collection foreach Fact Page.
 *
 * This is a one-time script that needs to be run once the field_fact_collection
 * has been added to the content type via features-revert.
 */
function dosomething_fact_page_import_fact_collections() {
  // If the fact collections have been imported already:
  if (variable_get('dosomething_fact_page_fact_collection_imported') == TRUE) {
    // Don't do anything.
    return;
  }

  // Get all Fact Page node nid's.
  $fact_pages = dosomething_helpers_get_node_vars('fact_page');
  // If no Fact Page nodes:
  if (empty($fact_pages)) {
    // Nothing to do here, exit.
    return;
  }

  // Loop through all fact page nodes.
  foreach ($fact_pages as $fact_page) {

    // Load the Fact Page node.
    $node = node_load($fact_page['nid']);

    // If a field_fact_collection doesn't exist, this will fail.
    if (!isset($node->field_fact_collection)) {
      return FALSE;
    }

    // If no field_facts set:
    if (!isset($node->field_facts[LANGUAGE_NONE][0])) {
      // Skip to next $fact_page node.
      continue;
    }

    // Loop through all field_facts values.
    foreach ($node->field_facts[LANGUAGE_NONE] as $fact_node) {
      $fact_nid = $fact_node['target_id'];
      // Initialize a new field_fact_collection field_collection_item entity.
      $fc_item = entity_create('field_collection_item', array(
        'field_name' => 'field_fact_collection',
      ));
      // Set its host entity to our stored Fact Page $node.
      $fc_item->setHostEntity('node', $node);
      // Set the Fact entityreference to our stored $fact_nid.
      $fc_item->field_fact[LANGUAGE_NONE][0]['target_id'] = $fact_nid;
      $fc_item->save();
    }

    // Save the parent Fact Page $node.
    node_save($node);

  }
  // Indicate that the fact_collections have been imported.
  variable_set('dosomething_fact_page_fact_collection_imported', TRUE);
  return variable_get('dosomething_fact_page_fact_collection_imported');
}

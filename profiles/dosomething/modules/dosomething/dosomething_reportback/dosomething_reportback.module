<?php
/**
 * @file
 * Code for the DoSomething Reportback feature.
 */
define('DOSOMETHING_REPORTBACK_LOG', variable_get('dosomething_reportback_log') ? TRUE : FALSE);

include_once 'dosomething_reportback.features.inc';
include_once 'dosomething_reportback.forms.inc';
include_once 'dosomething_reportback.theme.inc';
include_once 'dosomething_reportback.cron.inc';

/**
 * Implements hook_entity_info().
 */
function dosomething_reportback_entity_info() {
  $info = array();
  $info['reportback'] = array(
    'label' => t('Reportback'),
    'base table' => 'dosomething_reportback',
    'entity keys' => array(
      'id' => 'rbid',
      'label' => 'rbid',
    ),
    'entity class' => 'ReportbackEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'ReportbackEntityController',
    'module' => 'dosomething_reportback',
    'views controller class' => 'EntityDefaultViewsController',
  );
  $info['reportback_file'] = array(
    'label' => t('Reportback file'),
    'base table' => 'dosomething_reportback_file',
    'entity keys' => array(
      'id' => 'fid',
      'label' => 'fid',
    ),
    'entity class' => 'ReportbackFileEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'ReportbackFileEntityController',
    'module' => 'dosomething_reportback',
    'views controller class' => 'EntityDefaultViewsController',
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' =>  FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function dosomething_reportback_entity_property_info() {
  $info = array();

  // Set Reportback properties.
  $info['reportback']['properties']['rbid'] = array(
    'label' => t('Reportback rbid'),
    'description' => t('The unique ID of the reportback.'),
    'type' => 'integer',
    'schema field' => 'rbid',
    'entity views field' => TRUE,
  );
  $info['reportback']['properties']['nid'] = array(
    'label' => t('Node nid'),
    'description' => t('The node nid of the reportback.'),
    'type' => 'node',
    'schema field' => 'nid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['uid'] = array(
    'label' => t('User uid'),
    'description' => t('The user uid of the reportback.'),
    'type' => 'user',
    'schema field' => 'uid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['created'] = array(
    'label' => t('Created Date'),
    'description' => t('Date the reportback was created.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'created',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['updated'] = array(
    'label' => t('Last Updated'),
    'description' => t('Date the reportback was last updated.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'updated',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['quantity'] = array(
    'label' => t('Quantity'),
    'description' => t('The number of reportback_nouns reportback_verbed.'),
    'type' => 'integer',
    'required' => TRUE,
    'schema field' => 'quantity',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['why_participated'] = array(
    'label' => t('Why Participated'),
    'description' => t('Why the user participated.'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'why_participated',
    'setter callback' => 'entity_property_verbatim_set',
  );

  // Set Reportback File properties.
  $info['reportback_file']['properties']['rbid'] = array(
    'label' => t('Reportback File rbid'),
    'description' => t('The Reportback rbid the File belongs to.'),
    'type' => 'reportback',
    'schema field' => 'rbid',
    'required' => TRUE,
    'entity views field' => TRUE,
  );
  $info['reportback_file']['properties']['fid'] = array(
    'label' => t('Reportback file fid'),
    'description' => t('Unique file fid of the Reportback File.'),
    'type' => 'integer',
    'schema field' => 'fid',
    'entity views field' => TRUE,
  );
  $info['reportback_file']['properties']['caption'] = array(
    'label' => t('Caption'),
    'description' => t('File caption.'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'caption',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback_file']['properties']['status'] = array(
    'label' => t('Status'),
    'description' => t('Review status.'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'status',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback_file']['properties']['reviewed'] = array(
    'label' => t('Reviewed'),
    'description' => t('Time reviewed.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'status',
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function dosomething_reportback_menu() {
  $items = array();
  // Admin Reportback configuration page.
  $items['admin/config/dosomething/dosomething_reportback'] = array(
    'title' => 'DoSomething Reportback',
    'description' => 'Admin form to set Reportback variables.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_admin_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_reportback.admin.inc',
  );
  if (variable_get('dosomething_reportback_is_generate_enabled', FALSE)) {
    $items['admin/config/dosomething/dosomething_reportback/generate'] = array(
      'title' => 'Generate Reportbacks',
      'description' => 'Admin form to generate Lorem ipsum Reportbacks.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dosomething_reportback_admin_generate_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer modules'),
      'file' => 'dosomething_reportback.admin.inc',
    );
  }
  $items['reportback/%reportback'] = array(
    'title' => 'Reportback',
    'page callback' => 'dosomething_reportback_view_entity',
    'page arguments' => array(1),
    //'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('access content'),
  );
  $items['admin/reportback/%reportback'] = array(
    'title' => 'Reportback',
    'page callback' => 'dosomething_reportback_admin_view_entity',
    'page arguments' => array(2),
    // 'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('view any reportback'),
  );
  $items['admin/users/rb'] = array(
    'title' => 'Reportbacks',
    'page callback' => 'dosomething_reportback_count_page',
    'access arguments' => array('view any reportback'),
    'file' => 'dosomething_reportback.admin.inc',
    'weight' => 900,
  );
  // Add Reportback menu items for taxonomy_term and node entities:
  $rb_paths = array(
    'taxonomy/term/%taxonomy_term' => 2,
    'node/%node' => 1,
  );
  foreach ($rb_paths as $rb_path => $arg_index) {
    $rb_items = dosomething_reportback_get_review_menu_items($rb_path, $arg_index);
    $items = array_merge($items, $rb_items);
  }

  $items['admin/users/rb/add'] = array(
    'title' => 'Add reportback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_form'),
    'access callback' => 'user_access',
    'access arguments' => array('edit any reportback'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $items['reportback/%reportback/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'dosomething_reportback_edit_entity',
    'page arguments' => array(1),
    'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items['reportback/%reportback/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_delete_form', 1),
    'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  return $items;
}

/**
 * Returns array of menu items for given $prefix.
 *
 * @param string $prefix
 *   The URL prefix to use for this set of Review menu items.
 * @param int $arg_index
 *   The index of the argument of the loaded entity.
 *
 * @return array
 */
function dosomething_reportback_get_review_menu_items($prefix, $arg_index) {
  // Append /rb path to the given $prefix.
  $prefix .= '/rb';
  // Creates the parent tab.
  $items[$prefix] = array(
    'title' => 'Reportbacks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_files_form', 'pending', $arg_index),
    'access callback' => 'dosomething_reportback_review_page_access',
    'access arguments' => array($arg_index),
    'file' => 'dosomething_reportback.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 900,
  );
  $items[$prefix . '/inbox'] = array(
    'title' => 'Inbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_files_form', 'pending', $arg_index),
    'access callback' => 'dosomething_reportback_review_page_access',
    'access arguments' => array($arg_index),
    'file' => 'dosomething_reportback.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );
  return $items;
}

/**
 * Access callback for entity reportback review page.
 *
 * @param object $entity
 *   Loaded entity to inspect whether or not to display the RB Review page for.
 *
 * @return bool
 */
function dosomething_reportback_review_page_access($entity) {
  if (!user_access('view any reportback')) {
    return FALSE;
  }
  // If no entity was passed, that's fine -- we'll display all reportbacks.
  if ($entity == NULL) {
    return TRUE;
  }
  // Is this a node?
  if (isset($entity->nid)) {
    if ($entity->type == 'campaign_run') {
      return TRUE;
    }
    if ($entity->type == 'campaign') {
      return dosomething_campaign_get_campaign_type($entity) == 'campaign';
    }
    return FALSE;
  }
  // Is it a taxonomy term?
  elseif (isset($entity->tid)) {
    return TRUE;
  }
  // Don't display reportback tabs for other entities that may call this.
  return FALSE;
}



/**
 * Implements hook_admin_paths().
 */
function dosomething_reportback_admin_paths() {
  $paths = array(
    'node/*/rb*' => TRUE,
    'admin/reportback/*' => TRUE,
    'taxonomy/term/*/rb*' => TRUE,
  );
  return $paths;
}

/**
 * Access callback for reportback entity operations.
 */
function dosomething_reportback_access($op, $entity, $account = NULL) {
  global $user;
  if (empty($entity)) {
    return FALSE;
  }
  if (!isset($account)) {
    $account = $user;
  }
  $perm_any = $op . ' any reportback';
  $perm_own = $op . ' own reportback';
  if (user_access($perm_any, $account)){
    return TRUE;
  }
  // Check that user has access to $op own, and is the author.
  return user_access($perm_own, $account) && $account->uid == $entity->uid;
}

/**
 * Implements hook_permission().
 */
function dosomething_reportback_permission() {
  return array(
    'delete any reportback' => array(
      'title' => t('Delete any reportback'),
    ),
    'delete own reportback' => array(
      'title' => t('Delete own reportback'),
    ),
    'edit any reportback' => array(
      'title' => t('Edit any reportback'),
    ),
    'edit own reportback' => array(
      'title' => t('Edit own reportback'),
    ),
    'view any reportback' => array(
      'title' => t('View any reportback'),
    ),
    'view own reportback' => array(
      'title' => t('View own reportback'),
    ),
  );
}

/**
 * Menu autoloader for /reportback.
 */
function reportback_load($id) {
  $reportback = entity_load('reportback', array($id));
  return array_pop($reportback);
}

/**
 * Menu autoloader for /reportback.
 */
function reportback_file_load($fid) {
  $reportback_file = entity_load('reportback_file', array($fid));
  return array_pop($reportback_file);
}

/**
 * Callback for /reportback/ID page.
 */
function dosomething_reportback_admin_view_entity($entity) {
  return entity_view('reportback', array($entity->rbid => $entity), 'full');
}
/**
 * Returns all copy variables set on the permalink page.
 */
function _dosomething_reportback_get_permalink_copy_vars($user) {
  return array(
    'owners_rb_subtitle' => variable_get('dosomething_campaign_permalink_confirmation_owners_page_subtitle', ''),
    'owners_rb_scholarship' => variable_get('dosomething_campaign_permalink_confirmation_owners_scholarship', ''),
    'owners_rb_important' => variable_get('dosomething_campaign_permalink_confirmation_owners_important_to_you', ''),
    'owners_rb_social_cta' => variable_get('dosomething_campaign_permalink_confirmation_owners_social_cta', ''),
    'owners_title' => variable_get('dosomething_campaign_permalink_owners_page_title', ''),
    'owners_subtitle' => variable_get('dosomething_campaign_permalink_owners_page_subtitle', ''),
    'non_owners_title' => token_replace(variable_get('dosomething_campaign_permalink_nonowners_page_title', ''), array('user' => $user)),
    'non_owners_closed_button' => variable_get('dosomething_campaign_permalink_nonowners_closed_button_copy', ''),
    'non_owners_closed_cta' => variable_get('dosomething_campaign_permalink_nonowners_closed_cta', ''),
  );
}
/**
 * Implements hook_form_alter().
 *
 * Alters the signup form that is attached to permalink pages.
 */
function dosomething_reportback_form_alter(&$form, &$form_state, $form_id) {
  // A signup/login/register form, on a reportback page.
  $forms = array('dosomething_signup_form', 'user_register_form', 'user_login', 'user_login_block');
  if (in_array($form_id, $forms) && drupal_match_path($path = current_path(), 'reportback/*')) {
    $form['#submit'][] = 'dosomething_reportback_signup_submit';
  }
}

/**
 * Callback for /rbf/FID page.
 */
function dosomething_reportback_view_entity($entity) {
  $rb_simple_user = dosomething_user_get_simple_user($rb_user = user_load($entity->uid));
  global $user;
  $is_owner = ($user->uid == $rb_simple_user->uid) ? 1 : 0;
  $fid = $_GET['fid'];
  if (!$fid) {
    // Get the most recently uploaded item.
    $fid = array_pop($entity->fids);
  }
  // Try to get the permalink from cache.
  if ($cached_permalink = cache_get('ds_permalink_' . $entity->rbid . '_' . $fid . '_' . $is_owner, 'cache_dosomething_reportback')) {
    $permalink_vars = $cached_permalink->data;
  }
  else {
    // Additional reportback file specific data.
    $file = reportback_file_load($fid);
    $rb['image'] = $file->getImage('480x480');
    $rb['caption'] = $file->caption;
    $node = dosomething_campaign_load(node_load($entity->nid));

    $copy_vars = _dosomething_reportback_get_permalink_copy_vars($rb_user);

    $incentive = ($node->scholarship) ? $copy_vars['owners_rb_scholarship'] : "";
    $title = ($is_owner) ? $copy_vars['owners_title'] : $copy_vars['non_owners_title'];
    $subtitle = ($is_owner) ? $copy_vars['owners_rb_subtitle'] . " " . $incentive : $node->call_to_action;
    $link = '/' . drupal_get_path_alias('node/' . $node->nid);

    $character_limit = 250;
    $participated_copy = $entity->why_participated;

    if (strlen($participated_copy) > $character_limit) {
      $why_participated_short = dosomething_helpers_text_truncate($participated_copy, $character_limit, '...', FALSE, FALSE);
    }

    $reportback_url = url(current_path(), array('absolute' => TRUE, 'query' => array('fid' => $fid)));

    $share_text = token_replace(variable_get('dosomething_campaign_permalink_confirmation_owners_social_network_copy'), array('node' => $node));
    $share_text = str_replace('[node:issue]', strtolower($node->issue['name']), $share_text);

    // Set twitter text.
    $twitter_text = $share_text . " " . $reportback_url;

    // Set tumblr options
    $tumblr_options = array(
      'source' =>  $rb['image'],
      'caption' => $share_text . " " . $reportback_url,
      'clickthru' => $reportback_url,
    );

    // Create share button links
    $fb_link = paraneue_dosomething_facebook_intent($reportback_url);
    $twitter_link = paraneue_dosomething_twitter_intent($twitter_text);
    $tumblr_link = paraneue_dosomething_tumblr_intent($tumblr_options);
    $share_enabled = variable_get('dosomething_reportback_display_permalink_share', '');

    $permalink_vars = array(
      'rb' => $rb,
      'reportback' => $entity,
      'node' => $node,
      'user' => $rb_simple_user,
      'is_owner' => $is_owner,
      'copy_vars' => $copy_vars,
      'title' => $title,
      'subtitle' => $subtitle,
      'fb_link' => $fb_link,
      'twitter_link' => $twitter_link,
      'tumblr_link' => $tumblr_link,
      'share_enabled' => $share_enabled,
      'why_participated_short' => $why_participated_short,
    );

    cache_set('ds_permalink_' . $entity->rbid . '_' . $fid . '_' . $is_owner, $permalink_vars, 'cache_dosomething_reportback');
  }
  // Don't ever cache the signup button, as this changes/blocks submission.
  if($node->status == 'closed') {
    $signup = l($copy_vars['non_owners_closed_button'], 'campaigns', array('attributes' => array('class' => array('button'))));
  }
  else {
    $signup = dosomething_signup_get_signup_button('Sign Up', $entity->nid, 'dosomething_signup_form');
  }
  $permalink_vars['signup_button'] = $signup;

  return theme('reportback_permalink', $permalink_vars);
}
/**
 * Custom submit handler for signup form.
 * @see dosomething_reportback_form_alter().
 */
function dosomething_reportback_signup_submit(&$form, &$form_state) {
  // Add a redirect to the campaign node.
  if (isset($form['nid']['#value'])) {
    $nid = $form['nid']['#value'];
    $form_state['redirect'] = drupal_get_path_alias('node/' . $nid);
  }
}

/**
 * Process variables for entity.tpl.php.
 *
 * @see template_preprocess_entity in Entity API module.
 */
function dosomething_reportback_preprocess_entity(&$variables) {
  if ($variables['elements']['#entity_type'] == 'reportback' && $variables['view_mode'] == 'full') {
    // Enables reportback.tpl.php naming suggestion.
    $variables['theme_hook_suggestions'][] = 'reportback';
    $entity = $variables['elements']['#entity'];
  }
}

/**
 * Callback for /reportback/ID/edit page.
 */
function dosomething_reportback_edit_entity($entity) {
  return drupal_get_form('dosomething_reportback_form', $entity);
}

/**
 * Deletes a reportback entity.
 *
 * @param int $rbid
 *   Reportback rbid to delete.
 *
 * @return
 *   FALSE, if error.
 */
function dosomething_reportback_delete_reportback($rbid) {
  return entity_delete('reportback', $rbid);
}

/**
 * Checks if a reportback exists for given $nid and $uid.
 *
 * @param int $nid
 *   The node nid of the reportback to check.
 * @param int $uid
 *   Optional - the user uid of reportback to check.
 *   If not given, uses global $user->uid.
 *
 * @return mixed
 *   The rbid of reportback or FALSE if it doesn't exist.
 */
function dosomething_reportback_exists($nid, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  $result = db_select('dosomething_reportback', 'r')
    ->condition('uid', $uid)
    ->condition('nid', $nid)
    ->fields('r', array('rbid'))
    ->execute();
  $rbid = $result->fetchField(0);
  // If a rbid was found, return it.
  if (is_numeric($rbid)) {
    return $rbid;
  }
  // Otherwise return FALSE.
  return FALSE;
}

/**
 * Saves a reportback entity with given values.
 *
 * @param array $values
 *   The reportback entity values to save.
 *   If the rbid is set to 0, a new entity will be saved.
 *   Otherwise if a numeric rbid is passed, the entity will be updated.
 *
 * @return mixed
 *   The reportback entity rbid if success, or FALSE if error.
 */
function dosomething_reportback_save($values) {
  $rbid = $values['rbid'];
  if ($rbid == 0) {
    $entity = entity_create('reportback', array('nid' => $values['nid']));
  }
  else {
    $entity = entity_load_single('reportback', $rbid);
  }
  try {
    // Set entity properties.
    dosomething_reportback_set_properties($entity, $values);
    // Set entity files.
    dosomething_reportback_set_files($entity, $values);
    // Save the entity.
    $entity->save();
    if (isset($entity->rbid)) {
      cache_clear_all('ds_permalink_' .$entity->rbid, 'cache_dosomething_reportback', TRUE);
      // Return reportback rbid.
      return $entity->rbid;
    }
    return FALSE;
  }
  catch (Exception $e) {
    watchdog('dosomething_reportback', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Sets a reportback entity's properties.
 *
 * @param object $entity
 *   The reportback entity to set properties for.
 * @param array $values
 *   Associative of property values to set, with property name as keys.
 */
function dosomething_reportback_set_properties(&$entity, $values) {
  // List all possible entity properties to write.
  $properties = array(
    'uid',
    'nid',
    'quantity',
    'why_participated',
    'num_participants',
  );
  // For each of them:
  foreach ($properties as $property) {
    // If we have a value set for this property.
    if (isset($values[$property])) {
      // Set safe property value in wrapper.
      $entity->{$property} = filter_xss($values[$property], array());
    }
  }
}

/**
 * Sets a reportback entity's file and caption.
 *
 * @param object $entity
 *   The reportback entity to set properties for.
 * @param array $values
 *   An array of Reportback File data to set.
 */
function dosomething_reportback_set_files(&$entity, $values) {
  if (isset($values['fid']) && !empty($values['fid'])) {
    $entity->fid = $values['fid'];
    if (!empty($values['caption'])) {
      $entity->caption = filter_xss($values['caption'], array());
    }
  }
}

/**
 * Saves a reportback file for a given $uid and $nid from file $url.
 *
 * @param int $nid
 *   The node nid that this reportback file is associated with.
 * @param int $uid
 *   The users uid that this reportback file is associated with.
 * @param string $url
 *   The url of the file to save.
 *
 * @return mixed
 *   A file object if save is successful, FALSE if not.
 */
function dosomething_reportback_save_file_from_url($nid, $uid, $url) {
  if (DOSOMETHING_REPORTBACK_LOG) {
    watchdog('dosomething_reportback', 'Save file from url: '. $url);
  }
  // Get the location for where file should be saved to.
  $dest = dosomething_reportback_get_file_dest(basename($url), $nid, $uid);
  if (DOSOMETHING_REPORTBACK_LOG) {
    watchdog('dosomething_reportback', 'Write to dest: '. $dest);
  }
  // Download and save file to that location.
  $file_contents = file_get_contents($url);
  $file = file_save_data($file_contents, $dest);
  // Save UID and permanent status.
  $file->uid = $uid;
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  if (DOSOMETHING_REPORTBACK_LOG) {
    watchdog('dosomething_reportback', json_encode($file));
  }
  return $file;
}

/**
 * Returns the file destination for a new reportback file for given node $nid.
 *
 * @param string $filename
 *   Original upload filename, used to retain the file extension.
 * @param int $nid
 *   The node nid that this reportback is associated with.
 * @param int $uid
 *   The users uid that this reportback is associated with.
 *
 * @return string
 *   The file destination path to write the next reportback image to.
 */
function dosomething_reportback_get_file_dest($name, $nid, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  // Parse original filename.
  $pathinfo = pathinfo($name);
  $ext = 'jpg';
  // Save its extension.
  if (isset($pathinfo['extension'])) {
    $ext = $pathinfo['extension'];
  }
  // Define reportback nid file directory.
  $dir = 'public://reportbacks/' . $nid;
  // If directory doesn't exist / can't be created:
  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    // Use default public directory instead.
    $dir = 'public://';
  }
  $index = 0;
  if ($rb = dosomething_reportback_exists($nid, $uid)) {
    $reportback = reportback_load($rb);
    $index = count($reportback->fids);
  }
  $filename = 'uid_' . $uid . '-nid_' . $nid . '-' . $index . '.' . $ext;
  return $dir . '/' . $filename;
}

/**
 * Sends mbp request for a reportback.
 */
function dosomething_reportback_mbp_request($entity) {
  // This fid is the last file uploaded to the reportback.
  // @see ReportbackEntity->save().
  $inserted_fid = $entity->fid;
  $image_markup = dosomething_image_get_themed_image_by_fid($inserted_fid, '300x300');

  if (module_exists('dosomething_user')) {
    $account = user_load($entity->uid);
    $params = array(
      'email' => $account->mail,
      'uid' => $account->uid,
      'first_name' => dosomething_user_get_field('field_first_name', $account),
      'campaign_title' => $entity->node_title,
      'event_id' => $entity->nid,
      'impact_verb' => $entity->verb,
      'impact_number' => $entity->quantity,
      'impact_noun' => $entity->noun,
      'image_markup' => $image_markup,
    );
    if (module_exists('dosomething_mbp')) {
      dosomething_mbp_request('campaign_reportback', $params);
    }
  }
}

/**
 * Returns array of Reportback rbid's for a given User $uid.
 *
 * @param int $uid
 *   The User uid to query for.
 *
 * @return array
 */
function dosomething_reportback_get_reportbacks($uid = NULL) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  return db_select('dosomething_reportback', 'rb')
    ->fields('rb', array('rbid'))
    ->condition('uid', $uid)
    ->orderBy('created', 'DESC')
    ->execute()
    ->fetchCol(0);
}

/**
 * Returns reportback total for a given node $nid.
 *
 * @param int $nid
 *   A node nid.
 * @param string $type
 *   Type of total to return.  Accepted values: 'quantity' or 'count'.
 * @param bool $filter_flagged
 *   Whether or not to exclude flagged reportbacks.
 *
 * @return int $result
 *  Either the total reportback count, or the sum of all reportback quantity values.
 */
function dosomething_reportback_get_reportback_total_by_nid($nid, $type = 'quantity', $filter_flagged = TRUE) {

  // Select all reportbacks for given $nid.
  $query = db_select('dosomething_reportback', 'rb')->condition('nid', $nid);

  if ($filter_flagged) {
    $query->condition('flagged', 0);
  }

  if ($type == 'quantity') {
    $query->fields('rb', array('quantity'));
    $query->addExpression('SUM(quantity)', 'quantity');
    $result = $query->execute()->fetchAll();
    $quantity = $result[0]->quantity;
    dosomething_helpers_set_variable('node', $nid, 'sum_rb_quanity', $quantity);
    return $quantity;
  }
  elseif ($type == 'count') {
    $query->fields('rb', array('rbid'));
    return $query->execute()->rowCount();
  }
}

/**
 * Returns total number of Reportbacks by status (promoted, approved, etc).
 *
 * @param int $nid
 *   Campaign node id.
 * @param string $status
 *   Reportback status (promoted, approved, etc).
 * @return int
 */
function dosomething_reportback_get_reportback_total_by_status($nid, $status) {
  $params = array();
  $params['nid'] = $nid;
  $params['status'] = $status;

  return dosomething_reportback_get_reportback_files_query_count($params);
}

/**
 * Returns count of Reportbacks for a given node $uid.
 *
 * @param int $uid
 *   (optional) The User uid to get count of Reportbacks for.
 *   If not given, uses global $user->uid.
 *
 * @return int
 *   The number of Reportbacks for the User.
 */
function dosomething_reportback_get_count_by_uid($uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  // Select all reportbacks for given $uid.
  $query = db_select('dosomething_reportback', 'rb')
    ->fields('rb', array('rbid'))
    ->condition('uid', $uid);
  return $query->execute()->rowCount();
}

/**
 * Return the reportback noun & verb for a campaign.
 *
 * @param int $nid
 *   A campaign node id.
 * @return obj $results
 *   An object containing reportback noun & verb
 */
function dosomething_reportback_get_noun_and_verb($nid) {
  $query = db_select('field_data_field_reportback_noun', 'noun')
    ->condition('noun.entity_id', $nid);
  $query->addField('noun', 'field_reportback_noun_value', 'noun');
  $query->addField('verb', 'field_reportback_verb_value', 'verb');
  $query->join('field_data_field_reportback_verb', 'verb', 'noun.entity_id = verb.entity_id');
  $results = $query->execute()->fetch();

  return $results;
}

/**
 * Implementation of hook_services_resources().
 */
function dosomething_reportback_services_resources() {
  $resources = array();
  $resources['reportbacks'] = array(
    'operations' => array(
      'retrieve' => array(
        'help' => 'Retrieve a reportback.',
        'file' => array(
          'type' => 'inc',
          'module' => 'dosomething_reportback',
          'name' => 'resources/dosomething_reportback.resource',
        ),
        'callback' => '_dosomething_reportback_resource_retrieve',
        'args' => array(
          array(
            'name' => 'rbid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'The rbid of the reportback to retrieve.',
          ),
        ),
        'access callback' => '_dosomething_reportback_resource_access',
      ),
    ),
  );
  return $resources;
}

/**
 * Clear cache on dosomething_reportback table.
 */
function dosomething_reportback_cache_clear_all() {
  cache_clear_all('*', 'cache_dosomething_reportback', TRUE);
}


/**
 * Implements hook_flush_caches().
 */
function dosomething_reportback_flush_caches() {
  return array('cache_dosomething_reportback');
}


/**
 * Returns a SelectQuery object of Reportback Files with given $params.
 *
 * @param array $params
 *   An associative array of conditions to filter by. Possible keys:
 *   - nid: A node nid to filter by.
 *   - tid: A taxonomy term tid, filters RB Files for all nodes tagged tid.
 *   - status: The RB File status.
 *   - random: If set, randomly sort the results.
 */
function dosomething_reportback_get_reportback_files_query($params = array()) {
  $query = db_select('dosomething_reportback_file', 'rbf');
  $query->join('dosomething_reportback', 'rb', 'rb.rbid = rbf.rbid');
  $query->join('users', 'u', 'rb.uid = u.uid');
  $query->join('node', 'n', 'rb.nid = n.nid');
  $query->join('file_managed', 'f', 'rbf.fid = f.fid');
  if (isset($params['tid'])) {
    $query->join('field_data_field_primary_cause', 't', 't.entity_id = n.nid');
    $query->condition('t.field_primary_cause_tid', $params['tid']);
    $query->condition('t.entity_type', 'node');
  }
  if (isset($params['status'])) {
    $query->condition('rbf.status', $params['status']);
  }
  if (isset($params['nid'])) {
    $query->condition('rb.nid', $params['nid']);
  }
  elseif (isset($params['rbid'])) {
    $query->condition('rb.rbid', $params['rbid']);
  }

  // Public API properties to expose:
  $rbf_fields = array('fid', 'caption', 'rbid');
  $rb_fields = array('quantity', 'uid');
  // Staff-only properties to add:
  if (user_access('view any reportback')) {
    $rbf_fields[] = 'status';
    $rb_fields[] = 'why_participated';
  }
  $query->fields('rbf', $rbf_fields);
  $query->fields('rb', $rb_fields);
  $query->fields('n', array('nid', 'title'));
  $query->fields('f', array('timestamp'));
  if (isset($params['random'])) {
    $query->orderRandom();
  }
  else {
    $query->orderBy('rb.updated', 'DESC');
  }
  return $query;
}

/**
 * Returns Reportback Files query result to loop through.
 *
 * @param array $params
 *   An associative array of conditions to filter by.
 *   @see dosomething_reportback_get_reportback_files_query()
 * @param int $count
 *   Number of Reportback Files to return.
 * @param int $start
 *   Which RB File to start with. If present, $start and $count are used together
 *   to create a LIMIT clause for selecting RB Files. This could be used to do paging.
 *
 * @return
 *   An executed database query object to iterate through.
 */
function dosomething_reportback_get_reportback_files_query_result($params = array(), $count = 25, $start = 0) {
  $query = dosomething_reportback_get_reportback_files_query($params);
  if ($count) {
    $query->range($start, $count);
  }
  $result = $query->execute();
  return $result;
}

/**
 * Returns total number of results from a given RB Files query.
 *
 * @param array $params
 *   Associative array of query parameters.
 * @param bool $reset
 *   If TRUE, run SQL count query.
 *   If FALSE, use the Helper count variable if exists.
 *
 * @see dosomething_reportback_get_reportback_files_query().
 *
 * @return int
 */
function dosomething_reportback_get_reportback_files_query_count($params, $reset = FALSE) {
  $entity_type = NULL;

  // Name of helper variable which stores count for this status.
  $var_name = 'count_' . $params['status'];
  if (isset($params['nid'])) {
    $entity_type = 'node';
    $entity_id = $params['nid'];
  }
  elseif (isset($params['tid'])) {
    $entity_type = 'taxonomy_term';
    $entity_id = $params['tid'];
  }

  if ($entity_type && !$reset) {
    // Check if we have the count stored already.
    $count = dosomething_helpers_get_variable($entity_type, $entity_id, $var_name);
    if ($count === FALSE) {
      $reset = TRUE;
    }
    else {
      return $count;
    }
  }

  $query = dosomething_reportback_get_reportback_files_query($params);
  $result = $query->execute();
  $count = $result->rowCount();

  if ($entity_type && $reset) {
    dosomething_helpers_set_variable($entity_type, $entity_id, $var_name, $count);
  }

  return $count;
}

/**
 * Resets Reportback Count variables for given entity type and entity_id.
 */
function dosomething_reportback_reset_count($entity_type, $entity_id, $status = NULL) {
  $params = array();
  if ($entity_type == 'node') {
    $params['nid'] = $entity_id;
  }
  elseif ($entity_type == 'taxonomy_term') {
    $params['tid'] = $entity_id;
  }

  // If a status is provided, reset its count.
  if (isset($status)) {
    $params['status'] = $status;
    return dosomething_reportback_get_reportback_files_query_count($params, TRUE);
  }

  // Otherwise reset for all status counts.
  $status_values = dosomething_reportback_get_file_status_values();
  foreach ($status_values as $status) {
    $params['status'] = $status;
    dosomething_reportback_get_reportback_files_query_count($params, TRUE);
  }
}

/**
 * Returns array of all valid values for a Reportback File's status.
 */
function dosomething_reportback_get_file_status_values() {
  return array(
    'pending',
    'approved',
    'promoted',
    'excluded',
    'flagged',
  );
}

/**
 * Returns list of valid form options a Reportback File can be set to.
 */
function dosomething_reportback_get_file_status_options() {
  $keys = dosomething_reportback_get_file_status_values();
  $options = array();
  foreach ($keys as $name) {
    $options[$name] = t(ucfirst($name));
  }

  // Don't allow Pending as a form value.
  if (isset($options['pending'])) {
    unset($options['pending']);
  }

  return $options;
}

/**
 * Generates a new Reportback with Placekitten and Lorem ipsum.
 */
function dosomething_reportback_generate($nid = NULL, $num_reportbacks = 5) {
  global $user;
  // Load devel_generate module to get random Lorem ipsum's.
  module_load_include('inc', 'devel_generate', 'devel_generate');
  if ($num_reportbacks > 50) {
    return FALSE;
  }
  if (!$nid) {
    $nid = db_select("node", "n")
      ->fields("n", array("nid"))
      ->condition("type", "campaign")
      ->orderRandom()
      ->range(0,1)
      ->execute()
      ->fetchField();
  }
  // List of sites to grab images from.
  $generators = array(
    'placebear',
    'placecreature',
    'placekitten',
    'place-hoff',
  );
  for ($i = 0; $i < $num_reportbacks; $i++) {
    $values = array(
      'nid' => $nid,
      'uid' => $user->uid,
      'rbid' => 0,
      'caption' => devel_create_greeking(rand(1, 3)),
      'why_participated' => devel_create_greeking(rand(2, 20)),
      'quantity' => rand(2,800),
    );
    // Pick a site, any site.
    $random_key = array_rand($generators);
    $site = $generators[$random_key];

    // Pick an image, any image.
    $file_url = "http://" . $site . ".com/" . rand(300, 1000) . "/" . rand(300, 1000);
    // Save it.
    $file = dosomething_reportback_save_file_from_url($nid, $uid, $file_url);
    $values['fid'] = $file->fid;
    watchdog('dosomething_reportback', "Generated RB:" . json_encode($values));
    dosomething_reportback_save($values);
  }

}

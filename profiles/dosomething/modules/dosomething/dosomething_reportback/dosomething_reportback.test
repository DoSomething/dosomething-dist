<?php
/**
 * @file
 * Tests for dosomething_reportback.module.
 */

/**
 * DoSomething Reportback web tests.
 */
class DoSomethingReportbackWebTestCase extends DrupalWebTestCase {
  // Required to test inside the DoSomething profile:
  protected $profile = 'dosomething';

  public static function getInfo() {
    return array(
      'name' => 'DoSomething Reportback Web Tests',
      'description' => 'Web tests for dosomething_reportback module.',
      'group' => 'DoSomething',
    );
  }

  public function setUp() {
    global $user;
    parent::setUp(array('dosomething_reportback'));
    $this->tbl_name = 'dosomething_reportback';
    $this->log_tbl_name = 'dosomething_reportback_log';
  }

  /**
   * @see dosomething_reportback_schema().
   */
  public function testSchema() {

    // Test reportback entity table.
    $tbl = $this->tbl_name;
    $this->assertTrue(db_table_exists($tbl), $tbl . ' table exists.');
    $this->assertTrue(db_field_exists($tbl, 'rbid'), 'rbid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'uid'), 'uid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'nid'), 'nid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'created'), 'created field exists.');
    $this->assertTrue(db_field_exists($tbl, 'updated'), 'updated field exists.');
    $this->assertTrue(db_field_exists($tbl, 'quantity'), 'quantity field exists.');
    $this->assertTrue(db_field_exists($tbl, 'why_participated'), 'why_participated field exists.');
    $this->assertTrue(db_index_exists($tbl, 'uid'), 'uid index exists.');

    // Test reportback log table.
    $tbl = $this->log_tbl_name;
    $this->assertTrue(db_table_exists($tbl), $tbl . ' table exists.');
    $this->assertTrue(db_field_exists($tbl, 'id'), 'id field exists.');
    $this->assertTrue(db_field_exists($tbl, 'rbid'), 'rbid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'uid'), 'uid field exists.');
    $this->assertTrue(db_field_exists($tbl, 'op'), 'op field exists.');
    $this->assertTrue(db_field_exists($tbl, 'timestamp'), 'timestamp field exists.');
    $this->assertTrue(db_field_exists($tbl, 'quantity'), 'quantity field exists.');
    $this->assertTrue(db_field_exists($tbl, 'why_participated'), 'why_participated field exists.');
    $this->assertTrue(db_field_exists($tbl, 'files'), 'files field exists.');
    $this->assertTrue(db_field_exists($tbl, 'num_files'), 'num_files field exists.');
  }

  /**
   * @see dosomething_reportback_set_properties().
   */
  public function testSetProperties() {
    $entity = entity_create('reportback', array());
    $values = array(
      'uid' => 1,
      'nid' => 711,
      'quantity' => 412,
      'why_participated' => "lorem ipsum",
    );
    dosomething_reportback_set_properties($entity, $values);
    // Test that each property was written.
    foreach ($values as $property => $value) {
      $this->assertEqual($values[$property], $entity->{$property}, $property . " is equal.");
    }
  }

  /**
   * @see dosomething_reportback_set_files().
   */
  public function testSetFiles() {
    $entity = entity_create('reportback', array());
    $values = array(
      'files' => array(2, 3, 20),
    );
    dosomething_reportback_set_files($entity, $values);
    // Test that field_image_user_reportback value was written.
    foreach ($entity->field_image_user_reportback[LANGUAGE_NONE] as $delta => $file) {
      $this->assertEqual($file['fid'], $values['files'][$delta], "Fid "
         . $file['fid'] . " found.");
    }
  }

  /**
   * @see dosomething_reportback_save().
   */
  public function testSave() {
    $entity = entity_create('reportback', array());
    $values = array(
      'uid' => 1,
      'nid' => 711,
      'quantity' => 412,
      'why_participated' => "lorem ipsum",
      'files' => array(2, 3, 30),
    );
    // Numeric rbid should be returned upon successful save.
    $rbid = dosomething_reportback_save($entity, $values);
    $this->assertTrue(is_numeric($rbid), "Numeric rbid returned.");
    // Drop reportback table and watch the world burn.
    db_drop_table('dosomething_reportback');
    $entity = entity_create('reportback', array());
    // FALSE should be returned if there's an error saving entity.
    $rbid = dosomething_reportback_save($entity, $values);
    $this->assertFalse($rbid, "FALSE returned.");
  }
}

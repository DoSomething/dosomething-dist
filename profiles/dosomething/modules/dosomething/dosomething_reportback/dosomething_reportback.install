<?php
/**
 * @file
 * Installation and schema hooks for dosomething_reportback.module.
 */

/**
 * Implements hook_schema().
 */
function dosomething_reportback_schema() {
  $schema = array();
  $schema['dosomething_reportback'] = array(
    'description' => 'Table of user reportbacks.',
    'fields' => array(
      'rbid' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that reported back.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'The {node}.nid that the user has reported back for.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the reportback was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the reportback was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'quantity' => array(
        'description' => 'The quantity of reportback_nouns reportback_verbed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'why_participated' => array(
        'description' => 'Why the user participated.',
        'type' => 'text',
        'length' => '2048',
        'not null' => FALSE,
      ),
      'num_participants' => array(
        'description' => 'The number of participants, if applicable.',
        'type' => 'int',
      ),
      'flagged' => array(
        'description' => 'Whether the Reportback has been flagged.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'flagged_reason' => array(
        'description' => 'Reason why reportback was flagged.',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'primary key' => array('rbid'),
    'indexes' => array(
      'uid' => array('uid'),
      'nid' => array('nid'),
    ),
  );
  $schema['dosomething_reportback_log'] = array(
    'description' => 'Table of reportback update activity.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key of log table.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rbid' => array(
        'description' => 'Reportback rbid updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'op' => array(
        'description' => 'Operation performed on the reportback.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp of the update.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'quantity' => array(
        'description' => 'The quantity of reportback_nouns reportback_verbed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'why_participated' => array(
        'description' => 'Why the user participated.',
        'type' => 'text',
        'length' => '2048',
        'not null' => FALSE,
      ),
      'files' => array(
        'description' => 'Comma separated list of file fids attached to reportback.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'num_files' => array(
        'description' => 'The number of files attached to reportback.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'remote_addr' => array(
        'description' => 'The IP address of the user that submitted the form.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'field_data' => array(
        'description' => 'Any values stored in dosomething_reportback_field_data.',
        'type' => 'text',
        'length' => '2048',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['dosomething_reportback_file'] = array(
    'description' => 'Table of files associated with reportbacks.',
    'fields' => array(
      'rbid' => array(
        'description' => 'Reportback rbid',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'fid' => array(
        'description' => 'Original file fid',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'remote_addr' => array(
        'description' => 'The IP address of the user that submitted the file.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'caption' => array(
        'description' => 'File caption.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'options_processed' => array(
        'description' => 'File processing options.',
        'type' => 'text',
        'length' => '2048',
        'not null' => FALSE,
      ),
      'fid_processed' => array(
        'description' => 'Processed file fid',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The reportback file status.',
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
        'default' => 'pending',
      ),
      'reviewed' => array(
        'description' => 'Reviewed timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => NULL,
      ),
      'reviewer' => array(
        'description' => 'Reviewer uid',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => NULL,
      ),
      'review_source' => array(
        'description' => 'Source URL which review was submitted from.',
        'type' => 'varchar',
        'length' => 128,
        'default' => NULL,
      ),
    ),
    'primary key' => array('rbid', 'fid'),
  );
  // Add a custom cache table.
  $schema['cache_dosomething_reportback'] = drupal_get_schema_unprocessed('system', 'cache');
  return $schema;
}

/**
 * Drops field_image_user_reportback, adds dosomething_reportback_file table.
 */
function dosomething_reportback_update_7001(&$sandbox) {
  field_delete_field('field_image_user_reportback');
  $table_name = 'dosomething_reportback_file';
  $schema = dosomething_reportback_schema();
  db_create_table($table_name, $schema[$table_name]);
}

/**
 * Adds remote_addr field to reportback file and log tables.
 */
function dosomething_reportback_update_7002() {
  $field_name = 'remote_addr';
  // Tables to add remote_addr to.
  $tables = array('dosomething_reportback_log', 'dosomething_reportback_file');
  // Load schema for field definitions.
  $schema = dosomething_reportback_schema();
  foreach ($tables as $tbl_name) {
    // If the field doesn't exist already:
    if (!db_field_exists($tbl_name, $field_name)) {
      // Add it per the schema field definition.
      db_add_field($tbl_name, $field_name, $schema[$tbl_name]['fields'][$field_name]);
    }
  }
}

/**
 * Updates log records where uid==0 due to bug in $reportback->insertLog().
 */
function dosomething_reportback_update_7003() {
  // Update records with uid==0 to the uid value stored on the reportback.
  $sql = 'UPDATE dosomething_reportback_log log
    INNER JOIN dosomething_reportback rb ON (rb.rbid = log.rbid)
    SET log.uid = rb.uid
    WHERE log.uid = 0;';
  db_query($sql);
}

/**
 * Adds dosomething_reportback_field and dosomething_reportback_field_data tables.
 */
function dosomething_reportback_update_7004() {
  // No longer applicable.
  // @see dosomething_reportback_update_7012().
}

/**
 * Adds a dosomething_reportback_field for Comeback Clothes (nid 362).
 */
function dosomething_reportback_update_7005() {
  // No longer applicable.
  // @see dosomething_reportback_update_7012().
}

/**
 * Deletes empty records in the dosomething_reportback_field table.
 */
function dosomething_reportback_update_7006() {
  // No longer applicable.
  // @see dosomething_reportback_update_7012().
}

/**
 * Adds num_participants to the dosomething_reportback table.
 */
function dosomething_reportback_update_7007() {
  $tbl_name = 'dosomething_reportback';
  $fld_name = 'num_participants';
  $schema = dosomething_reportback_schema();
  if (!db_field_exists($tbl_name, $fld_name)) {
    // Add it per the schema field definition.
    db_add_field($tbl_name, $fld_name, $schema[$tbl_name]['fields'][$fld_name]);
  }
}

/**
 * Sets dosomething_reportback_num_participants_label variable.
 */
function dosomething_reportback_update_7008() {
  $var_name = 'dosomething_reportback_num_participants_label';
  $value = 'How many people did you do this with?';
  variable_set($var_name, $value);
}

/**
 * Add index to nid on dosomething_reportback table.
 */
function dosomething_reportback_update_7009() {
  $table = 'dosomething_reportback';
  $column = 'nid';
  if (!db_index_exists($table, $column)) {
    db_add_index($table, $column, array($column));
  }
}

/**
 * Add index to rbid on dosomething_reportback_field_data table.
 */
 function dosomething_reportback_update_7010() {
  // No longer applicable.
  // @see dosomething_reportback_update_7012().
 }

/**
 * Creates dosomething reportback cache table.
 */
 function dosomething_reportback_update_7011() {
   if (!db_table_exists('cache_dosomething_reportback')) {
     $schema = drupal_get_schema_unprocessed('system', 'cache');
     db_create_table('cache_dosomething_reportback', $schema);
   }
 }

/**
 * Deletes Reportback Field tables.
 */
 function dosomething_reportback_update_7012() {
  $delete_tables = array(
    'dosomething_reportback_field',
    'dosomething_reportback_field_data',
  );
  foreach ($delete_tables as $table) {
    if (db_table_exists($table)) {
      db_drop_table($table);
    }
  }
  $table = 'dosomething_reportback_log';
  $field = 'field_data';
  if (db_field_exists($table, $field)) {
    db_drop_field($table, $field);
  }
}

/**
 * Adds new columnns to the dosomething_reportback_file table.
 */
function dosomething_reportback_update_7013(&$sandbox) {
  $tbl_name = 'dosomething_reportback_file';
  $new_fields = array(
    'caption',
    'options_processed',
    'fid_processed',
  );
  $schema = dosomething_reportback_schema();
  foreach ($new_fields as $fld_name) {
    if (!db_field_exists($tbl_name, $fld_name)) {
      // Add it per the schema field definition.
      db_add_field($tbl_name, $fld_name, $schema[$tbl_name]['fields'][$fld_name]);
    }
  }
}

/**
 * Adds new status column to the dosomething_reportback_file table.
 */
function dosomething_reportback_update_7014(&$sandbox) {
  $tbl_name = 'dosomething_reportback_file';
  $fld_name = 'status';
  $schema = dosomething_reportback_schema();
  if (!db_field_exists($tbl_name, $fld_name)) {
    // Add it per the schema field definition.
    db_add_field($tbl_name, $fld_name, $schema[$tbl_name]['fields'][$fld_name]);
  }
  if (!db_index_exists($tbl_name, $fld_name)) {
    db_add_index($tbl_name, $fld_name, array($fld_name));
  }
  // Add index for fid column.
  $fld_name = 'fid';
  if (!db_index_exists($tbl_name, $fld_name)) {
    db_add_index($tbl_name, $fld_name, array($fld_name));
  }
}

/**
 * Adds review columns to the dosomething_reportback_file table.
 */
function dosomething_reportback_update_7015(&$sandbox) {
  $tbl_name = 'dosomething_reportback_file';
  $fields = array('reviewed', 'reviewer', 'review_source');
  $schema = dosomething_reportback_schema();
  foreach ($fields as $fld_name) {
    if (!db_field_exists($tbl_name, $fld_name)) {
      // Add it per the schema field definition.
      db_add_field($tbl_name, $fld_name, $schema[$tbl_name]['fields'][$fld_name]);
    }
  }
}


/**
 * Adds flagged columns to the dosomething_reportback table.
 */
function dosomething_reportback_update_7016(&$sandbox) {
  $tbl_name = 'dosomething_reportback';
  $fields = array('flagged', 'flagged_reason');
  $schema = dosomething_reportback_schema();
  foreach ($fields as $fld_name) {
    if (!db_field_exists($tbl_name, $fld_name)) {
      // Add it per the schema field definition.
      db_add_field($tbl_name, $fld_name, $schema[$tbl_name]['fields'][$fld_name]);
    }
  }
}

/**
 * Updates status for reportback_files corresponding to promoted flaggings.
 */
function dosomething_reportback_update_7017(&$sandbox) {
  if (!module_exists('flag')) {
    return;
  }
  $flag = flag_get_flag('promoted');
  if (!$flag) {
    return;
  }
  $output = '';
  $query = db_select('flagging', 'f');
  $query->join('field_data_field_image_description', 'd', "f.flagging_id = d.entity_id AND d.bundle = 'promoted'");
  // Get the promoted File's entity_id.
  $query->fields('f', array('entity_id'));
  // And its editorial caption.
  $query->fields('d', array('field_image_description_value'));
  // Filter by promoted flag fid.
  $query->condition('fid', $flag->fid)
    ->condition('f.entity_type', 'file');
  $result = $query->execute();

  while($record = $result->fetchAssoc()) {
    $import = db_update('dosomething_reportback_file')
      ->fields(array(
        'status' => 'promoted',
        'caption' => $record['field_image_description_value'],
      ))
      ->condition('fid', $record['entity_id'])
      ->execute();

    if ($import) {
      $status = 'Promoted';
    }
    else {
      $status = 'Error promoting';
    }
    $output .= $status . ' file ' . $record['entity_id'] . ' with caption ' . $record['field_image_description_value'] . '. ';
  }
  return $output;
}

/**
 * Updates reportbacks and rb files corresponding to Flagged RB flaggings.
 */
function dosomething_reportback_update_7018(&$sandbox) {
  if (!module_exists('flag')) {
    return;
  }
  $flag = flag_get_flag('flagged_reportback');
  if (!$flag) {
    return;
  }
  $output = '';
  $query = db_select('flagging', 'f');
  // Get the Reportback rbid.
  $query->fields('f', array('entity_id'));
  $query->condition('fid', $flag->fid)
    ->condition('f.entity_type', 'reportback');
  $result = $query->execute();

  while($record = $result->fetchAssoc()) {
    $rbid = $record['entity_id'];
    // Query the flagged_reason field to store the flagged reason on the entity.
    // NOTE: This didn't work because we should have been querying for
    // the flagging_id, not the reportback rbid.
    // @see dosomething_reportback_update_7021()
    $reasons = array();
    $flagged_reason_result = db_select('field_data_field_flagged_reason', 'r')
      ->fields('r')
      ->condition('entity_id', $rbid)
      ->execute()
      ->fetchAll();
    // Loop through each flagged reason field value:
    foreach ($flagged_reason_result as $record) {
      $reasons[] = $record->field_flagged_reason_value;
    }
    // Implode reasons into a single string to set on the reportback entity.
    $flagged_reason = implode(', ', $reasons);
    $values = array(
      'status' => 'flagged',
      'flagged_reason' => $flagged_reason,
      'source' => 'dosomething_reportback_update_7018',
    );
    $reportback = reportback_load($rbid);
    foreach ($reportback->fids as $fid) {
      $rbf = reportback_file_load($fid);
      $rbf->review($values);
    }
    $output .= "Flagged Reportback " . $rbid . ". ";
  }

  return $output;
}

/**
 * Deletes the Promoted Flag.
 */
function dosomething_reportback_update_7019(&$sandbox) {
  if (!module_exists('flag')) {
    return;
  }
  // Load Flag module to use its cache clearing functions.
  module_load_include('inc', 'flag', 'includes/flag.admin');
  $flag = flag_get_flag('promoted');
  if (!$flag) {
    return;
  }

  // Delete the Weight field (only used by Promoted Flag).
  field_delete_field('field_weight');

  // Delete the Image Descirption instance from the Promoted Flag.
  // This is an error, it should have been flagging.
  // This is what stopped the promoted flag from deleting.
  if ($instance = field_info_instance('flag', 'field_image_description', 'promoted')) {
    field_delete_instance($instance);
  }

  // Remove all flagging entities for this flag.
  flag_reset_flag($flag);
  // Delete the flag.
  // @see flag_delete_confirm_submit()
  $flag->delete();
  $flag->disable();
  _flag_clear_cache($flag->entity_type, TRUE);
}

/**
 * Deletes the promoted Flag for real this time. (without errors) 
 */
function dosomething_reportback_update_7020(&$sandbox) {
  if (!module_exists('flag')) {
    return;
  }
  // Load Flag module to use its cache clearing functions.
  module_load_include('inc', 'flag', 'includes/flag.admin');
  $flag = flag_get_flag('promoted');
  if (!$flag) {
    return;
  }

  // Delete the Weight field (only used by Promoted Flag).
  field_delete_field('field_weight');

  // Delete the Image Descirption instance from the Promoted Flag.
  if ($instance = field_info_instance('flagging', 'field_image_description', 'promoted')) {
    field_delete_instance($instance);
  }

  // Remove all flagging entities for this flag.
  flag_reset_flag($flag);
  // Delete the flag.
  // @see flag_delete_confirm_submit()
  $flag->delete();
  $flag->disable();
  _flag_clear_cache($flag->entity_type, TRUE);
}

/**
 * Fixes bug in flagged reason import from update 7018.
 */
function dosomething_reportback_update_7021(&$sandbox) {
  if (!module_exists('flag')) {
    return;
  }
  $flag = flag_get_flag('flagged_reportback');
  if (!$flag) {
    return;
  }
  $output = '';

  // Query Flagging table for all Flagged Reportback flaggings.
  $query = db_select('flagging', 'f');
  $query->fields('f');
  $query->condition('fid', $flag->fid)
    ->condition('f.entity_type', 'reportback');
  $result = $query->execute();

  while($record = $result->fetchAssoc()) {
    $rbid = $record['entity_id'];
    $reasons = array();

    // Query the flagged_reason field to store the flagging's flagged reasons.
    $flagged_reason_result = db_select('field_data_field_flagged_reason', 'r')
      ->fields('r')
      ->condition('entity_id', $record['flagging_id'])
      ->execute()
      ->fetchAll();

    // Loop through each flagged reason field value:
    foreach ($flagged_reason_result as $record) {
      $reasons[] = $record->field_flagged_reason_value;
    }
    // Implode reasons into a single string to set on the reportback entity.
    $flagged_reason = implode(', ', $reasons);

    // Update the Reportback.
    $import = db_update('dosomething_reportback')
      ->fields(array(
        'flagged_reason' => $flagged_reason,
        ))
      ->condition('rbid', $rbid)
      ->condition('flagged', 1)
      ->execute();

    $output .= "Imported Flag Reason for Reportback " . $rbid . ". ";
  }

  return $output;
}

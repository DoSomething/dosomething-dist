<?php
/**
 * @file
 * Code for the DoSomething specific Message Broker Producer (mbp)
 * functionality.
 */

/**
 * Implements hook_menu().
 */
function dosomething_mbp_menu() {

  $items['admin/config/dosomething/dosomething_mbp'] = array(
    'title' => 'DoSomething MBP',
    'description' => 'DoSomething MBP (Message Broker Producer) settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_mbp_config_form'),
    'access arguments' => array('administer message_broker_producer'),
    'file' => 'dosomething_mbp.admin.inc',
  );

  return $items;
}

/**
 * A request to send a queue entry to the Message Broker system.
 *
 * @param string $origin
 *   Where the message request came from.
 * @param array $params
 *   Optional keyed array of data to build payload from.
 *
 * @return bool
 *   The status of the request.
 */
function dosomething_mbp_request($origin, $params = NULL) {

  $production = NULL;
  switch ($origin) {
    case 'user_register':
      $production = 'transactional_user_register';
      break;

    case 'user_password':
      $production = 'transactional_user_password';
      break;

    case 'campaign_signup':
      $production = 'transactional_campaign_signup';
      break;

    case 'campaign_group_signup':
      $production = 'transactional_campaign_group_signup';
      break;

    case 'campaign_reportback':
      $production = 'transactional_campaign_reportback';
      break;

    default:
      watchdog('dosomething_mbp', 'Undefined origin: %origin sent to dosomething_mbp_request()', array('%origin' => $origin), WATCHDOG_ERROR);

  }
  $payload = dosomething_mbp_get_transactional_payload($origin, $params);
  if (variable_get('dosomething_mbp_log')) {
    watchdog('dosomething_mbp', $production . " params: " . json_encode($params));
    watchdog('dosomething_mbp', "Payload: " . json_encode($payload));
  }

  try {
    return message_broker_producer_request($production, $payload);
  }
  catch (Exception $e) {
    watchdog('dosomething_mbp', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }

}

/**
 * Build payload for transactional producer requests.
 *
 * NOTE:
 * Any adjustments to the data before it becomes payload should be done in
 * this function.
 *
 * @param string $origin
 *   Where the message request came from that's used to determine what the
 *   payload should be.
 * @param array $params
 *   Optional keyed array of data to build payload from.
 *
 * @return array
 *   $payload - Composed values ready to be sent as a message payload.
 */
function dosomething_mbp_get_transactional_payload($origin, $params = NULL) {
  // Payload items common to all transactional messages.
  $params['first_name'] = isset($params['first_name']) ? $params['first_name'] : 'Doer';
  $payload = array(
    'activity' => $origin,
    'email' => $params['email'],
    'uid' => $params['uid'],
    'merge_vars' => array(
      'MEMBER_COUNT' => dosomething_user_get_member_count(TRUE),
    ),
  );

  // If email template wasn't set before, get standart template name.
  if (!empty($params['email_template'])) {
    $payload['email_template'] = $params['email_template'];
  } else {
    $payload['email_template'] = dosomething_mbp_get_template_name($origin);
  }

  // Payload specific to each transaction type.
  switch ($origin) {
    case 'user_register':
      $payload['mailchimp_list_id'] = $params['mailchimp_list_id'];
      $payload['birthdate']         = $params['birthdate'];
      $payload['subscribed']        = 1;
      if (!empty($params['mobile'])) {
        $payload['mobile'] = $params['mobile'];

        if (!empty($params['mc_opt_in_path_id'])) {
          $payload['mc_opt_in_path_id'] = $params['mc_opt_in_path_id'];
        }
      }

      // Override MailChimp group data if specified explicitly.
      if (!empty($params['mailchimp_grouping_id'])) {
        $payload['mailchimp_grouping_id'] = $params['mailchimp_grouping_id'];
      }
      if (!empty($params['mailchimp_group_name'])) {
        $payload['mailchimp_group_name'] = $params['mailchimp_group_name'];
      }

      $payload['merge_vars']['FNAME'] = $params['first_name'];
      $payload['email_tags'][] = 'drupal_user_register';
      break;

    case 'user_password':
      $payload['merge_vars']['FNAME'] = $params['first_name'];
      $payload['merge_vars']['RESET_LINK'] = $params['reset_link'];
      $payload['email_tags'][] = 'drupal_user_password';
      break;

    case 'campaign_signup':
      dosomething_mbp_get_common_campaign_payload($payload, $params);
      $payload['merge_vars']['CALL_TO_ACTION'] = $params['call_to_action'];
      $payload['merge_vars']['STEP_ONE'] = $params['step_one'];
      $payload['merge_vars']['STEP_TWO'] = $params['step_two'];
      $payload['merge_vars']['STEP_THREE'] = $params['step_three'];
      $payload['email_tags'][] = 'drupal_campaign_signup';
      break;

    case 'campaign_group_signup':
      dosomething_mbp_get_common_campaign_payload($payload, $params);
      $payload['merge_vars']['CAMPAIGN_COPY'] = $params['transactional_email_copy'];
      $payload['email_tags'][] = 'drupal_campaign_group_signup';
      break;

    case 'campaign_reportback':
      $payload['event_id'] = $params['event_id'];
      $payload['merge_vars']['FNAME'] = $params['first_name'];
      $payload['merge_vars']['CAMPAIGN_TITLE'] = $params['campaign_title'];
      $payload['merge_vars']['IMPACT_VERB'] = $params['impact_verb'];
      $payload['merge_vars']['IMPACT_NUMBER'] = $params['impact_number'];
      $payload['merge_vars']['IMPACT_NOUN'] = $params['impact_noun'];
      $payload['merge_vars']['REPORTBACK_IMAGE_MARKUP'] = $params['image_markup'];
      $payload['email_tags'][] = 'drupal_campaign_reportback';
      break;

  }

  return $payload;
}

/**
 * Common payload for campaign / group_campaign transactional producer requests.
 *
 * NOTE:
 * Any adjustments to the data before it becomes common campaign /
 * group_campaign payload should be done in this function.
 *
 * @param array $params
 *   Keyed array of data to build payload from.
 *
 * @return array
 *   $payload - Composed values ready to be sent as a message payload.
 */
function dosomething_mbp_get_common_campaign_payload(&$payload, $params) {
  $payload['subscribed']        = 1;
  $payload['event_id']          = $params['event_id'];

  $payload['email_tags'][] = $params['event_id'];
  // Check for Mailchimp grouping_id+group_name:
  $mailchimp = !empty($params['mailchimp_group_name'])
            && !empty($params['mailchimp_grouping_id'])
            && !empty($params['mailchimp_list_id']);

  if ($mailchimp) {
    $payload['mailchimp_list_id']     = $params['mailchimp_list_id'];
    $payload['mailchimp_grouping_id'] = $params['mailchimp_grouping_id'];
    $payload['mailchimp_group_name']  = $params['mailchimp_group_name'];
  }
  $payload['merge_vars']['FNAME'] = $params['first_name'];
  $payload['merge_vars']['CAMPAIGN_TITLE'] = $params['campaign_title'];
  $payload['merge_vars']['CAMPAIGN_LINK'] = $params['campaign_link'];

  if (!empty($params['mobile'])) {
    $payload['mobile'] = $params['mobile'];
    if (!empty($params['mc_opt_in_path_id'])) {
      $payload['mc_opt_in_path_id'] = $params['mc_opt_in_path_id'];
    }
  }
}

/**
 * Define template name to use for transaction based on the event and the
 * affiliate code.
 *
 * @param string $event_name
 *   Example: "campaign_signup", "password_reset", etc
 *
 * @return string
 *   Name of Mandrill template to use for transactional message.
 */
function dosomething_mbp_get_template_name($event_name) {
  $country_code = dosomething_settings_get_affiliate_country_code();
  // Convert from $origin use of "_" to "-" for template name
  $event_name = str_replace('_', '-', $event_name);
  return 'mb-' . $event_name . '-' . $country_code;
}
